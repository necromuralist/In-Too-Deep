#+BEGIN_COMMENT
.. title: How do you handle multiple outputs?
.. slug: how-do-you-handle-multiple-outputs
.. date: 2018-10-19 14:30:27 UTC-07:00
.. tags: grokking,notes,neural networks
.. category: Grokking
.. link: 
.. description: Notes from "Grokking Deep Learning" on handling multiple outputs.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
* Imports
** From Python
#+BEGIN_SRC python :session grok :results none
from typing import List
#+END_SRC
** From PyPi
#+BEGIN_SRC ipython :session grok :results none
from graphviz import Digraph
import numpy
#+END_SRC
* What is this?
  This is a continuation of my notes on Chapter Three of "Grokking Deep Learning". In the previous post we looked at a simple neural network with three inputs and one output. Here we'll look at handling multiple outputs.
* How do you handle one input and multiple outputs?
  Suppose instead of using multiple inputs to predict and outcome (like winning) you instead had a single input and multiple outputs (like what percentage feels sad, or indifferent based on whether you won or lost as well as whether you will win).

#+BEGIN_SRC ipython :session grok :results raw drawer :ipyfile ../../../files/posts/grokking/03_forward_propagation/how-do-you-handle-multiple-outputs/feelings_model.dot.png
graph = Digraph(comment="Feelings Model", format="png")
graph.node("A", "Won/Lost")
graph.node("B", "Hurt")
graph.node("C", "Win")
graph.node("D", "Sad")
graph.edge("A", "B", label=".3" )
graph.edge("A", "C", label=".2" )
graph.edge("A", "D", label=".9" )
graph.render("graphs/feelings_model.dot")
graph
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[39]:
[[file:../../../files/posts/grokking/how-do-you-handle-multiple-outputs/feelings_model.dot.png]]
:END:

[[file:feelings_model.dot.png]]
* Data Types
#+BEGIN_SRC python :session grok :results none
Vector = List[float]
#+END_SRC
* How do you implement this?
  In this case the outputs are simply the input times the weight of the output, so while the single output was the dot-product of the inputs and the weights, this is an elementwise multiplication of the input and the weights.

#+BEGIN_SRC python :session grok :results none
def elementwise_multiplication(scalar: float, weights: Vector) -> Vector:
    """multiplies the value against each of the weights
    
    Returns:
     output: scalar times each of the weights as a list
    """
    return [scalar * weights[index] for index in range(len(weights))]
#+END_SRC

** In action
#+BEGIN_SRC python :session grok :results none
labels = "Hurt Win Sad".split()
weights = [0.3, 0.2, 0.9]
fraction_of_wins = [0.65, 0.8, 0.8, 0.9]
#+END_SRC

#+BEGIN_SRC python :session grok :results output :exports both
wins = fraction_of_wins[0]
expected = [0.195, 0.13, 0.585]
actual = elementwise_multiplication(wins, weights)
tolerance = 0.1**5
for index, item in enumerate(actual):
    assert abs(expected[index] - item) < tolerance
    print("{}: {:.3f}".format(labels[index], item))
#+END_SRC

#+RESULTS:
: Hurt: 0.195
: Win: 0.130
: Sad: 0.585

* How would you do this with numpy?

#+BEGIN_SRC python :session grok :results output :exports both
vector_weights = numpy.array(weights)
actual = vector_weights * wins
for index, item in enumerate(actual):
    assert abs(expected[index] - item) < tolerance
    print("{}: {:.3f}".format(labels[index], item))
#+END_SRC

#+RESULTS:
: Hurt: 0.195
: Win: 0.130
: Sad: 0.585
