#+BEGIN_COMMENT
.. title: Creating A Dataset Using Google Images
.. slug: creating-a-dataset-using-google-images
.. date: 2019-04-21 22:39:09 UTC-07:00
.. tags: fastai,data
.. category: FastAI
.. link: 
.. description: Creating an image dataset using Google Images.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+OPTIONS: H:5
#+TOC: headlines 2
#+BEGIN_SRC ipython :session fastai :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

This is a re-working of the [[https://github.com/fastai/course-v3/blob/master/nbs/dl1/lesson2-download.ipynb][Notebook *by: Francisco Ingham and Jeremy Howard.]] Who cite [[https://www.pyimagesearch.com/2017/12/04/how-to-create-a-deep-learning-dataset-using-google-images][Adrian Rosebrock]] as the original inspiration.

* Beginning
** Imports
*** Python
#+begin_src ipython :session fastai :results none
from pathlib import Path
#+end_src
*** PyPi
#+begin_src ipython :session fastai :results none
from google_images_download.google_images_download import googleimagesdownload\
    as GoogleImages
#+end_src
*** Graeae
#+begin_src ipython :session fastai :results none
from graeae import EnvironmentLoader
#+end_src
** Set Up
*** The Environment
#+begin_src ipython :session fastai :results none
ENVIRONMENT = EnvironmentLoader()
OUTPUT_FOLDER = Path(ENVIRONMENT["WEEDS"]).expanduser()
if not OUTPUT_FOLDER.is_dir():
    OUTPUT_FOLDER.mkdir(parents=True)
#+end_src
*** The Downloader
#+begin_src ipython :session fastai :results none
google_images = GoogleImages()
#+end_src
* Middle
** Downloading the Images
*** Dandelions
#+begin_src ipython :session fastai :results output :exports both
arguments = dict(
    keywords="dandelion",
    limit=1000,
    type="photo",
    delay=1,
    output_directory=str(OUTPUT_FOLDER),
    image_director="dandelion",
    chromedrive="/usr/local/bin/chromedriver",
    save_source="MANIFEST",
)

paths = google_images.download(arguments)
#+end_src

#+begin_src ipython :session fastai :results output :exports both
for filename in (OUTPUT_FOLDER/"dandelion").iterdir():
    try:
        with Image.open(filename) as image:
            print(f"Okay: {filename}")
    except Exception:
        print(f"Removing: {filename}")
#+end_src
* End

# In[ ]:


classes = ['teddys','grizzly','black']


# In[ ]:


download_images(path/file, dest, max_pics=200)


# In[ ]:


# If you have problems download, try with `max_workers=0` to see exceptions:
download_images(path/file, dest, max_pics=20, max_workers=0)


# Then we can remove any images that can't be opened:

# In[ ]:


for c in classes:
    print(c)
    verify_images(path/c, delete=True, max_size=500)


# ## View data

# In[ ]:


np.random.seed(42)
data = ImageDataBunch.from_folder(path, train=".", valid_pct=0.2,
        ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)


# In[ ]:


# If you already cleaned your data, run this cell instead of the one before
# np.random.seed(42)
# data = ImageDataBunch.from_csv(path, folder=".", valid_pct=0.2, csv_labels='cleaned.csv',
#         ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)


# Good! Let's take a look at some of our pictures then.

# In[ ]:


data.classes


# In[ ]:


data.show_batch(rows=3, figsize=(7,8))


# In[ ]:


data.classes, data.c, len(data.train_ds), len(data.valid_ds)


# ## Train model

# In[ ]:


learn = cnn_learner(data, models.resnet34, metrics=error_rate)


# In[ ]:


learn.fit_one_cycle(4)


# In[ ]:


learn.save('stage-1')


# In[ ]:


learn.unfreeze()


# In[ ]:


learn.lr_find()


# In[ ]:


learn.recorder.plot()


# In[ ]:


learn.fit_one_cycle(2, max_lr=slice(3e-5,3e-4))


# In[ ]:


learn.save('stage-2')


# ## Interpretation

# In[ ]:


learn.load('stage-2');


# In[ ]:


interp = ClassificationInterpretation.from_learner(learn)


# In[ ]:


interp.plot_confusion_matrix()


# ## Cleaning Up
# 
# Some of our top losses aren't due to bad performance by our model. There are images in our data set that shouldn't be.
# 
# Using the `ImageCleaner` widget from `fastai.widgets` we can prune our top losses, removing photos that don't belong.

# In[ ]:


from fastai.widgets import *


# First we need to get the file paths from our top_losses. We can do this with `.from_toplosses`. We then feed the top losses indexes and corresponding dataset to `ImageCleaner`.
# 
# Notice that the widget will not delete images directly from disk but it will create a new csv file `cleaned.csv` from where you can create a new ImageDataBunch with the corrected labels to continue training your model.

# In order to clean the entire set of images, we need to create a new dataset without the split. The video lecture demostrated the use of the `ds_type` param which no longer has any effect. See [the thread](https://forums.fast.ai/t/duplicate-widget/30975/10) for more details.

# In[ ]:


db = (ImageList.from_folder(path)
                   .no_split()
                   .label_from_folder()
                   .transform(get_transforms(), size=224)
                   .databunch()
     )


# In[ ]:


# If you already cleaned your data using indexes from `from_toplosses`,
# run this cell instead of the one before to proceed with removing duplicates.
# Otherwise all the results of the previous step would be overwritten by
# the new run of `ImageCleaner`.

# db = (ImageList.from_csv(path, 'cleaned.csv', folder='.')
#                    .no_split()
#                    .label_from_df()
#                    .transform(get_transforms(), size=224)
#                    .databunch()
#      )


# Then we create a new learner to use our new databunch with all the images.

# In[ ]:


learn_cln = cnn_learner(db, models.resnet34, metrics=error_rate)

learn_cln.load('stage-2');


# In[ ]:


ds, idxs = DatasetFormatter().from_toplosses(learn_cln)


# Make sure you're running this notebook in Jupyter Notebook, not Jupyter Lab. That is accessible via [/tree](/tree), not [/lab](/lab). Running the `ImageCleaner` widget in Jupyter Lab is [not currently supported](https://github.com/fastai/fastai/issues/1539).

# In[ ]:


ImageCleaner(ds, idxs, path)


# Flag photos for deletion by clicking 'Delete'. Then click 'Next Batch' to delete flagged photos and keep the rest in that row. `ImageCleaner` will show you a new row of images until there are no more to show. In this case, the widget will show you images until there are none left from `top_losses.ImageCleaner(ds, idxs)`

# You can also find duplicates in your dataset and delete them! To do this, you need to run `.from_similars` to get the potential duplicates' ids and then run `ImageCleaner` with `duplicates=True`. The API works in a similar way as with misclassified images: just choose the ones you want to delete and click 'Next Batch' until there are no more images left.

# Make sure to recreate the databunch and `learn_cln` from the `cleaned.csv` file. Otherwise the file would be overwritten from scratch, loosing all the results from cleaning the data from toplosses.

# In[ ]:


ds, idxs = DatasetFormatter().from_similars(learn_cln)


# In[ ]:


ImageCleaner(ds, idxs, path, duplicates=True)


# Remember to recreate your ImageDataBunch from your `cleaned.csv` to include the changes you made in your data!

# ## Putting your model in production

# First thing first, let's export the content of our `Learner` object for production:

# In[ ]:


learn.export()


# This will create a file named 'export.pkl' in the directory where we were working that contains everything we need to deploy our model (the model, the weights but also some metadata like the classes or the transforms/normalization used).

# You probably want to use CPU for inference, except at massive scale (and you almost certainly don't need to train in real-time). If you don't have a GPU that happens automatically. You can test your model on CPU like so:

# In[ ]:


defaults.device = torch.device('cpu')


# In[ ]:


img = open_image(path/'black'/'00000021.jpg')
img


# We create our `Learner` in production enviromnent like this, jsut make sure that `path` contains the file 'export.pkl' from before.

# In[ ]:


learn = load_learner(path)


# In[ ]:


pred_class,pred_idx,outputs = learn.predict(img)
pred_class


# So you might create a route something like this ([thanks](https://github.com/simonw/cougar-or-not) to Simon Willison for the structure of this code):
# 
# ```python
# @app.route("/classify-url", methods=["GET"])
# async def classify_url(request):
#     bytes = await get_bytes(request.query_params["url"])
#     img = open_image(BytesIO(bytes))
#     _,_,losses = learner.predict(img)
#     return JSONResponse({
#         "predictions": sorted(
#             zip(cat_learner.data.classes, map(float, losses)),
#             key=lambda p: p[1],
#             reverse=True
#         )
#     })
# ```
# 
# (This example is for the [Starlette](https://www.starlette.io/) web app toolkit.)

# ## Things that can go wrong

# - Most of the time things will train fine with the defaults
# - There's not much you really need to tune (despite what you've heard!)
# - Most likely are
#   - Learning rate
#   - Number of epochs

# ### Learning rate (LR) too high

# In[ ]:


learn = cnn_learner(data, models.resnet34, metrics=error_rate)


# In[ ]:


learn.fit_one_cycle(1, max_lr=0.5)


# ### Learning rate (LR) too low

# In[ ]:


learn = cnn_learner(data, models.resnet34, metrics=error_rate)


# Previously we had this result:
# 
# ```
# Total time: 00:57
# epoch  train_loss  valid_loss  error_rate
# 1      1.030236    0.179226    0.028369    (00:14)
# 2      0.561508    0.055464    0.014184    (00:13)
# 3      0.396103    0.053801    0.014184    (00:13)
# 4      0.316883    0.050197    0.021277    (00:15)
# ```

# In[ ]:


learn.fit_one_cycle(5, max_lr=1e-5)


# In[ ]:


learn.recorder.plot_losses()


# As well as taking a really long time, it's getting too many looks at each image, so may overfit.

# ### Too few epochs

# In[ ]:


learn = cnn_learner(data, models.resnet34, metrics=error_rate, pretrained=False)


# In[ ]:


learn.fit_one_cycle(1)


# ### Too many epochs

# In[ ]:


np.random.seed(42)
data = ImageDataBunch.from_folder(path, train=".", valid_pct=0.9, bs=32, 
        ds_tfms=get_transforms(do_flip=False, max_rotate=0, max_zoom=1, max_lighting=0, max_warp=0
                              ),size=224, num_workers=4).normalize(imagenet_stats)


# In[ ]:


learn = cnn_learner(data, models.resnet50, metrics=error_rate, ps=0, wd=0)
learn.unfreeze()


# In[ ]:


learn.fit_one_cycle(40, slice(1e-6,1e-4))

