#+BEGIN_COMMENT
.. title: Custom Filters
.. slug: custom-filters
.. date: 2018-12-02 16:06:32 UTC-08:00
.. tags: filters,cnn
.. category: 
.. link: 
.. description: Custom CNN Filters.
.. type: text
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
* Introduction
  This is from [[https://github.com/udacity/deep-learning-v2-pytorch.git][Udacity's Deep Learning Repository]] which supports their Deep Learning Nanodegree.
* Set Up
** Imports
*** From PyPi
#+BEGIN_SRC ipython :session cnn :results none
from dotenv import load_dotenv
import matplotlib.pyplot as pyplot
import matplotlib.image as mpimg
import cv2
import numpy
import seaborn
#+END_SRC
*** This Project
#+BEGIN_SRC ipython :session cnn :results none
from neurotic.tangles.data_paths import DataPathTwo
#+END_SRC
** Set Up
#+BEGIN_SRC ipython :session cnn :results none
get_ipython().run_line_magic('matplotlib', 'inline')
seaborn.set(style="whitegrid",
            rc={"axes.grid": False,
                "font.family": ["sans-serif"],
                "font.sans-serif": ["Latin Modern Sans", "Lato"],
                "figure.figsize": (14, 12)},
            font_scale=3)
#+END_SRC
* Read in the image
#+BEGIN_SRC ipython :session cnn :results output :exports both
load_dotenv()
path = DataPathTwo("curved_lane.jpg", folder_key="CNN")
print(path.from_folder)
assert path.from_folder.is_file()
#+END_SRC

#+RESULTS:
: /home/hades/datasets/cnn/curved_lane.jpg

#+BEGIN_SRC ipython :session cnn :results raw drawer :ipyfile ../../../files/posts/nano/cnn/custom-filters/curved_lane.png
image = mpimg.imread(path.from_folder)

axe_image = pyplot.imshow(image)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[9]:
[[file:../../../files/posts/nano/cnn/custom-filters/curved_lane.png]]
:END:

[[file:curved_lane.png]]

* Convert the image to grayscale

#+BEGIN_SRC ipython :session cnn :results raw drawer :ipyfile ../../../files/posts/nano/cnn/custom-filters/gray_curved.png
gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
axe_image = pyplot.imshow(gray, cmap='gray')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[10]:
[[file:../../../files/posts/nano/cnn/custom-filters/gray_curved.png]]
:END:

[[file:gray_curved.png]]

* Create a custom kernel

Below, you've been given one common type of edge detection filter: a Sobel operator.

The Sobel filter is very commonly used in edge detection and in finding patterns in intensity in an image. Applying a Sobel filter to an image is a way of **taking (an approximation) of the derivative of the image** in the x or y direction, separately. The operators look as follows.

[[file:sobel_ops.png]]

For a challenge, see if you can put the image through a series of filters: first one that blurs the image (takes an average of pixels), and then one that detects the edges.

3x3 array for edge detection

#+BEGIN_SRC ipython :session cnn :results none
sobel_y = numpy.array([[ -1, -2, -1], 
                       [  0, 0, 0], 
                       [ 1, 2, 1]])
#+END_SRC

# Filter the image using filter2D, which has inputs: (grayscale image, bit-depth, kernel)  

#+BEGIN_SRC ipython :session cnn :results raw drawer :ipyfile ../../../files/posts/nano/cnn/custom-filters/sobel_1.png
filtered_image = cv2.filter2D(gray, -1, sobel_y)

axe_image = pyplot.imshow(filtered_image, cmap='gray')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[15]:
[[file:../../../files/posts/nano/cnn/custom-filters/sobel_1.png]]
:END:

[[file:sobel_1.png]]

** Prewitt
   This matrix is from [[https://hipersayanx.blogspot.com/2015/08/convolutional-edge-detection-filters.html][this]] blog post.

#+BEGIN_SRC ipython :session cnn :results none
prewitt = numpy.array([[-1, -1, -1],
                       [0, 0, 0],
                       [1, 1, 1]])
#+END_SRC

#+BEGIN_SRC ipython :session cnn :results raw drawer :ipyfile ../../../files/posts/nano/cnn/custom-filters/prewitt.png
filtered_prewitt = cv2.filter2D(gray, -1, prewitt)

axe_image = pyplot.imshow(filtered_prewitt, cmap='gray')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[17]:
[[file:../../../files/posts/nano/cnn/custom-filters/prewitt.png]]
:END:

[[file:prewitt.png]]

** Sharpen

This is from the [[https://en.wikipedia.org/wiki/Kernel_(image_processing)][Wikipedia article]] about kernels for image processing.

#+BEGIN_SRC ipython :session cnn :results raw drawer :ipyfile ../../../files/posts/nano/cnn/custom-filters/sharpen.png
mask = numpy.array([[0, -1, 0],
                    [-1, 5, -1],
                    [0, -1, 0]])
sharpened = cv2.filter2D(gray, -1, mask)

axe_image = pyplot.imshow(sharpened, cmap='gray')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[19]:
[[file:../../../files/posts/nano/cnn/custom-filters/sharpen.png]]
:END:

[[file:sharpen.png]]

This one isn't so obvious, but if you compare it to the original grayscale image you'll see that it is a little less blurry.
