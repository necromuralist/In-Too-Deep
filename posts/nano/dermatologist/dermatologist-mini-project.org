#+BEGIN_COMMENT
.. title: Dermatologist Mini-Project
.. slug: dermatologist-mini-project
.. date: 2019-01-16 21:17:45 UTC-08:00
.. tags: project,dermatologist,cnn,transfer learning
.. category: Project
.. link: 
.. description: Replicating the melanoma-detection CNN project.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
#+BEGIN_SRC ipython :session dermatologist :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

* Introduction
  This is an exercise in using transfer learning to diagnose melanoma based on images of skin legions. There are three diseases to be detected:
  - Melanoma
  - Nevus
  - Sebhorrheic Keratosis

There is a paper online [[https://arxiv.org/pdf/1710.05006.pdf][here]] (PDF link) that describes the approaches that did best in the competition.
* Data Sources
  The data is taken from the [[https://challenge.kitware.com/#challenge/583f126bcad3a51cc66c8d9a][ISIC 2017: Skin Lesion Analysis Towards Melanoma Detection]] challenge.
  - [[https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/train.zip][Training Data]]
  - [[https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/valid.zip][Validation Data]]
  - [[https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/test.zip][Test Data]]

Each folder contains three sub-folders:
 - =melanoma/=
 - =nevus/=
 - =seborrheic_keratosis/=

* Set Up
** Imports
*** Python
#+BEGIN_SRC ipython :session dermatologist :results none
import warnings
#+END_SRC
*** PyPi
#+BEGIN_SRC ipython :session dermatologist :results none
from dotenv import load_dotenv
from PIL import ImageFile
from torchvision import datasets
import matplotlib
warnings.filterwarnings("ignore", category=matplotlib.cbook.mplDeprecation)
import matplotlib.pyplot as pyplot
import matplotlib.image as mpimage
import matplotlib.patches as patches
import numpy
import pyttsx3
import seaborn
import torch
import torchvision.models as models
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optimizer
import torchvision.transforms as transforms
#+END_SRC
*** This Project
#+BEGIN_SRC ipython :session dermatologist :results none
from neurotic.tangles.data_paths import (Batches, DataPathTwo, DataSets,
                                         TrainingTestingValidationPaths,
                                         Transformer)
from neurotic.tangles.models import Inception
from neurotic.tangles.timer import Timer
from neurotic.tangles.trainer import Trainer
from neurotic.tangles.logging import Tee
#+END_SRC
** Plotting
#+BEGIN_SRC ipython :session dermatologist :results none
get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")
seaborn.set(style="whitegrid",
            rc={"axes.grid": False,
                "font.family": ["sans-serif"],
                "font.sans-serif": ["Open Sans", "Latin Modern Sans", "Lato"],
                "figure.figsize": (8, 6)},
            font_scale=1)
#+END_SRC
** Set the Random Seed

#+BEGIN_SRC ipython :session dermatologist :results none
numpy.random.seed(seed=2019)
#+END_SRC

** Handle Truncated Images
   There seems to be at least one image that is truncated which will cause an exception when it's loaded so this next setting lets us ignore the error and keep working.
#+BEGIN_SRC ipython :session dermatologist :results none
ImageFile.LOAD_TRUNCATED_IMAGES = True
#+END_SRC
** Constants
   These are some global constants
*** Model Path
    This is where to save the best model.
#+BEGIN_SRC ipython :session dermatologist :results none
MODEL_PATH = DataPathTwo(folder_key="MODELS")
#+END_SRC
* The Model

** Disecting the Inception Class
   The =Inception= class bundles together a bunch of stuff that was originally being done in separate cells. Rather than putting comments all over it I'm going to show what it's doing by describing how I was doing it before I created the class.
*** The Model Property
The last layer of the classifier in the =Inception.model= property is the only layer of the pre-trained model that I change. In the case of the =Inception V3= model there is a single layer called /fc/, as opposed to multiple layers called /classifier/ as with the =VGG16= model, so I just re-assign it to a fully-connected layer with the number of outputs that matches the number of dog breeds.

Here's a little inspection to show what it's doing.

#+BEGIN_SRC ipython :session dermatologist :results output :exports both
model_transfer = models.inception_v3(pretrained=True)
print(model_transfer.fc)
#+END_SRC

#+RESULTS:
: Linear(in_features=2048, out_features=1000, bias=True)

#+BEGIN_SRC :session dermatologist :results none :noweb-ref transfer-input-count
CLASSIFIER_INPUTS = model_transfer.fc.in_features
#+END_SRC

#+BEGIN_SRC ipython :session dermatologist :results output :exports both
print(CLASSIFIER_INPUTS) 
print(model_transfer.fc.out_features)
#+END_SRC

#+RESULTS:
: 2048
: 1000

The layer we're going to replace has 2,048 inputs and 1,000 outputs. We'll have to match the number of inputs and change it to our 133.

*** Freeze the Features Layers
   In the =model= property I'm also freezing the parameters so that the pre-trained parameters don't change when training the last layer.
#+BEGIN_SRC ipython :session dermatologist :results none :noweb-ref transfer-freeze
for parameter in model_transfer.parameters():
   parameter.requires_grad = False
#+END_SRC
*** The New Classifier
  This next block of code is also in the =Inception.model= definition and is where I'm replacing the last layer with out dog-breed-classification layer.

#+BEGIN_SRC ipython :session dermatologist :results none :noweb-ref transfer-classifier
model_transfer.fc = nn.Linear(in_features=CLASSIFIER_INPUTS,
                             out_features=BREEDS,
                             bias=True)
#+END_SRC

*** The Loss Function and Optimizer
   The =Inception= class uses the same loss and gradient descent definitions as the naive model did (in the =criterion= and =optimizer= properties).

#+BEGIN_SRC ipython :session dermatologist :results none :noweb-ref transfer-criterion
criterion_transfer = nn.CrossEntropyLoss()
optimizer_transfer = optimizer.Adam(model_transfer.parameters(),
                                 lr=0.001)
#+END_SRC

** The Training

#+BEGIN_SRC ipython :session dermatologist :results none
load_dotenv()
EPOCHS = 100
transfer_path = MODEL_PATH.folder.joinpath("model_transfer.pt")
training_log = Tee(log_name="inception_train.log")
testing_log = Tee(log_name="inception_test.log")
data_sets = DataSets()
inception = Inception(data_sets.class_count)
batches = Batches(data_sets)
trainer = Trainer(training_batches=batches.training,
                  validation_batches=batches.validation,
                  testing_batches=batches.testing,
                  model=inception.model,
                  model_path=transfer_path,
                  optimizer=inception.optimizer,
                  criterion=inception.criterion ,
                  device=inception.device,
                  epochs=EPOCHS,
                  epoch_start=1,
                  is_inception=True,
                  load_model=False,
                  training_log=training_log,
                  testing_log=testing_log,
                  beep=True,
)
#+END_SRC

#+BEGIN_SRC ipython :session dermatologist :results output :exports both
trainer()
#+END_SRC

#+RESULTS:
#+begin_example
Starting Training
Started: 2019-01-26 13:59:40.249210
Started: 2019-01-26 13:59:40.249398
Ended: 2019-01-26 14:16:25.675136
Elapsed: 0:16:45.425738
Epoch: 1	Training - Loss: 0.85	Accuracy: 0.67	Validation - Loss: 0.97	Accuracy: 0.53
Validation loss decreased (inf --> 0.973706). Saving model ...
Started: 2019-01-26 14:16:26.913182
Ended: 2019-01-26 14:33:23.108155
Elapsed: 0:16:56.194973
Epoch: 2	Training - Loss: 0.78	Accuracy: 0.68	Validation - Loss: 0.93	Accuracy: 0.56
Validation loss decreased (0.973706 --> 0.934509). Saving model ...
Ended: 2019-01-26 14:33:23.997547
Elapsed: 0:16:57.084365

Starting Testing
Started: 2019-01-26 14:33:24.706175
Test Loss: 0.697
Test Accuracy: 70.95 (1419.0/2000)
Ended: 2019-01-26 14:47:30.356073
Elapsed: 0:14:05.649898
#+end_example


* References
  - [[https://github.com/udacity/dermatologist-ai][Github Repository]]


