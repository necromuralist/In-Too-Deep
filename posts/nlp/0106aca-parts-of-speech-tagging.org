#+BEGIN_COMMENT
.. title: Parts-of-Speech Tagging
.. slug: parts-of-speech-tagging
.. date: 2020-11-15 15:59:44 UTC-08:00
.. tags: nlp,pos tagging
.. category: NLP
.. link: 
.. description: Parts-of-Speech (POS) tagging.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3

#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Beginning
  - {{% lancelot title="The Dataset" %}}parts-of-speech-tagging-the-data{{% /lancelot %}}
  - {{% lancelot title="Setting Up the Training" %}}parts-of-speech-tagging-training{{% /lancelot %}}
  - {{% lancelot title="Implementing the Baseline Model" %}}parts-of-speech-tagging-most-frequent-class-baseline{{% /lancelot %}}
  - {{% lancelot title="Hidden Markov Model" %}}parts-of-speech-tagging-hidden-markov-model{{% /lancelot %}}
* Middle
* End
* Raw
#+begin_example

# <a name='1'></a>
# # Part 1: Parts-of-speech tagging 
# 
# <a name='1.1'></a>

# <a name='1.2'></a>

# <a name='2'></a>

# <a name='3'></a>
# # Part 3: Viterbi Algorithm and Dynamic Programming
# 
# In this part of the assignment you will implement the Viterbi algorithm which makes use of dynamic programming. Specifically, you will use your two matrices, `A` and `B` to compute the Viterbi algorithm. We have decomposed this process into three main steps for you. 
# 
# * **Initialization** - In this part you initialize the `best_paths` and `best_probabilities` matrices that you will be populating in `feed_forward`.
# * **Feed forward** - At each step, you calculate the probability of each path happening and the best paths up to that point. 
# * **Feed backward**: This allows you to find the best path with the highest probabilities. 
# 
# <a name='3.1'></a>
# ## Part 3.1:  Initialization 
# 
# You will start by initializing two matrices of the same dimension. 
# 
# - best_probs: Each cell contains the probability of going from one POS tag to a word in the corpus.
# 
# - best_paths: A matrix that helps you trace through the best possible path in the corpus. 

# <a name='ex-05'></a>
# ### Exercise 05
# **Instructions**: 
# Write a program below that initializes the `best_probs` and the `best_paths` matrix. 
# 
# Both matrices will be initialized to zero except for column zero of `best_probs`.  
# - Column zero of `best_probs` is initialized with the assumption that the first word of the corpus was preceded by a start token ("--s--"). 
# - This allows you to reference the **A** matrix for the transition probability
# 
# Here is how to initialize column 0 of `best_probs`:
# - The probability of the best path going from the start index to a given POS tag indexed by integer $i$ is denoted by $\textrm{best_probs}[s_{idx}, i]$.
# - This is estimated as the probability that the start tag transitions to the POS denoted by index $i$: $\mathbf{A}[s_{idx}, i]$ AND that the POS tag denoted by $i$ emits the first word of the given corpus, which is $\mathbf{B}[i, vocab[corpus[0]]]$.
# - Note that vocab[corpus[0]] refers to the first word of the corpus (the word at position 0 of the corpus). 
# - **vocab** is a dictionary that returns the unique integer that refers to that particular word.
# 
# Conceptually, it looks like this:
# $\textrm{best_probs}[s_{idx}, i] = \mathbf{A}[s_{idx}, i] \times \mathbf{B}[i, corpus[0] ]$
# 
# 
# In order to avoid multiplying and storing small values on the computer, we'll take the log of the product, which becomes the sum of two logs:
# 
# $best\_probs[i,0] = log(A[s_{idx}, i]) + log(B[i, vocab[corpus[0]]$
# 
# Also, to avoid taking the log of 0 (which is defined as negative infinity), the code itself will just set $best\_probs[i,0] = float('-inf')$ when $A[s_{idx}, i] == 0$
# 
# 
# So the implementation to initialize $best\_probs$ looks like this:
# 
# $ if A[s_{idx}, i] <> 0 : best\_probs[i,0] = log(A[s_{idx}, i]) + log(B[i, vocab[corpus[0]]])$
# 
# $ if A[s_{idx}, i] == 0 : best\_probs[i,0] = float('-inf')$
# 
# Please use [math.log](https://docs.python.org/3/library/math.html) to compute the natural logarithm.

# The example below shows the initialization assuming the corpus starts with the phrase "Loss tracks upward".
# 
# <img src = "Initialize4.PNG"/>

# Represent infinity and negative infinity like this:
# 
# ```CPP
# float('inf')
# float('-inf')
# ```

# In[ ]:


# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)
# GRADED FUNCTION: initialize
def initialize(states, tag_counts, A, B, corpus, vocab):
    '''
    Input: 
        states: a list of all possible parts-of-speech
        tag_counts: a dictionary mapping each tag to its respective count
        A: Transition Matrix of dimension (num_tags, num_tags)
        B: Emission Matrix of dimension (num_tags, len(vocab))
        corpus: a sequence of words whose POS is to be identified in a list 
        vocab: a dictionary where keys are words in vocabulary and value is an index
    Output:
        best_probs: matrix of dimension (num_tags, len(corpus)) of floats
        best_paths: matrix of dimension (num_tags, len(corpus)) of integers
    '''
    # Get the total number of unique POS tags
    num_tags = len(tag_counts)
    
    # Initialize best_probs matrix 
    # POS tags in the rows, number of words in the corpus as the columns
    best_probs = np.zeros((num_tags, len(corpus)))
    
    # Initialize best_paths matrix
    # POS tags in the rows, number of words in the corpus as columns
    best_paths = np.zeros((num_tags, len(corpus)), dtype=int)
    
    # Define the start token
    s_idx = states.index("--s--")
    ### START CODE HERE (Replace instances of 'None' with your code) ###
    
    # Go through each of the POS tags
    for i in None: # complete this line
        
        # Handle the special case when the transition from start token to POS tag i is zero
        if None: # complete this line
            
            # Initialize best_probs at POS tag 'i', column 0, to negative infinity
            best_probs[i,0] = None
        
        # For all other cases when transition from start token to POS tag i is non-zero:
        else:
            
            # Initialize best_probs at POS tag 'i', column 0
            # Check the formula in the instructions above
            best_probs[i,0] = None
                        
    ### END CODE HERE ### 
    return best_probs, best_paths


# In[ ]:


best_probs, best_paths = initialize(states, tag_counts, A, B, prep, vocab)


# In[ ]:


# Test the function
print(f"best_probs[0,0]: {best_probs[0,0]:.4f}") 
print(f"best_paths[2,3]: {best_paths[2,3]:.4f}")


# ##### Expected Output
# 
# ```CPP
# best_probs[0,0]: -22.6098
# best_paths[2,3]: 0.0000
# ```
# 

# <a name='3.2'></a>
# ## Part 3.2 Viterbi Forward
# 
# In this part of the assignment, you will implement the `viterbi_forward` segment. In other words, you will populate your `best_probs` and `best_paths` matrices.
# - Walk forward through the corpus.
# - For each word, compute a probability for each possible tag. 
# - Unlike the previous algorithm `predict_pos` (the 'warm-up' exercise), this will include the path up to that (word,tag) combination. 
# 
# Here is an example with a three-word corpus "Loss tracks upward":
# - Note, in this example, only a subset of states (POS tags) are shown in the diagram below, for easier reading. 
# - In the diagram below, the first word "Loss" is already initialized. 
# - The algorithm will compute a probability for each of the potential tags in the second and future words. 
# 
# Compute the probability that the tag of the second work ('tracks') is a verb, 3rd person singular present (VBZ).  
# - In the `best_probs` matrix, go to the column of the second word ('tracks'), and row 40 (VBZ), this cell is highlighted in light orange in the diagram below.
# - Examine each of the paths from the tags of the first word ('Loss') and choose the most likely path.  
# - An example of the calculation for **one** of those paths is the path from ('Loss', NN) to ('tracks', VBZ).
# - The log of the probability of the path up to and including the first word 'Loss' having POS tag NN is $-14.32$.  The `best_probs` matrix contains this value -14.32 in the column for 'Loss' and row for 'NN'.
# - Find the probability that NN transitions to VBZ.  To find this probability, go to the `A` transition matrix, and go to the row for 'NN' and the column for 'VBZ'.  The value is $4.37e-02$, which is circled in the diagram, so add $-14.32 + log(4.37e-02)$. 
# - Find the log of the probability that the tag VBS would 'emit' the word 'tracks'.  To find this, look at the 'B' emission matrix in row 'VBZ' and the column for the word 'tracks'.  The value $4.61e-04$ is circled in the diagram below.  So add $-14.32 + log(4.37e-02) + log(4.61e-04)$.
# - The sum of $-14.32 + log(4.37e-02) + log(4.61e-04)$ is $-25.13$. Store $-25.13$ in the `best_probs` matrix at row 'VBZ' and column 'tracks' (as seen in the cell that is highlighted in light orange in the diagram).
# - All other paths in best_probs are calculated.  Notice that $-25.13$ is greater than all of the other values in column 'tracks' of matrix `best_probs`, and so the most likely path to 'VBZ' is from 'NN'.  'NN' is in row 20 of the `best_probs` matrix, so $20$ is the most likely path.
# - Store the most likely path $20$ in the `best_paths` table.  This is highlighted in light orange in the diagram below.

# The formula to compute the probability and path for the $i^{th}$ word in the $corpus$, the prior word $i-1$ in the corpus, current POS tag $j$, and previous POS tag $k$ is:
# 
# $\mathrm{prob} = \mathbf{best\_prob}_{k, i-1} + \mathrm{log}(\mathbf{A}_{k, j}) + \mathrm{log}(\mathbf{B}_{j, vocab(corpus_{i})})$
# 
# where $corpus_{i}$ is the word in the corpus at index $i$, and $vocab$ is the dictionary that gets the unique integer that represents a given word.
# 
# $\mathrm{path} = k$
# 
# where $k$ is the integer representing the previous POS tag.
# 

# <a name='ex-06'></a>
# 
# ### Exercise 06
# 
# Instructions: Implement the `viterbi_forward` algorithm and store the best_path and best_prob for every possible tag for each word in the matrices `best_probs` and `best_tags` using the pseudo code below.
# 
# `for each word in the corpus
# 
#     for each POS tag type that this word may be
#     
#         for POS tag type that the previous word could be
#         
#             compute the probability that the previous word had a given POS tag, that the current word has a given POS tag, and that the POS tag would emit this current word.
#             
#             retain the highest probability computed for the current word
#             
#             set best_probs to this highest probability
#             
#             set best_paths to the index 'k', representing the POS tag of the previous word which produced the highest probability `
# 
# Please use [math.log](https://docs.python.org/3/library/math.html) to compute the natural logarithm.

# <img src = "Forward4.PNG"/>

# <details>    
# <summary>
#     <font size="3" color="darkgreen"><b>Hints</b></font>
# </summary>
# <p>
# <ul>
#     <li>Remember that when accessing emission matrix B, the column index is the unique integer ID associated with the word.  It can be accessed by using the 'vocab' dictionary, where the key is the word, and the value is the unique integer ID for that word.</li>
# </ul>
# </p>
# 

# In[ ]:


# UNQ_C6 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)
# GRADED FUNCTION: viterbi_forward
def viterbi_forward(A, B, test_corpus, best_probs, best_paths, vocab):
    '''
    Input: 
        A, B: The transition and emission matrices respectively
        test_corpus: a list containing a preprocessed corpus
        best_probs: an initilized matrix of dimension (num_tags, len(corpus))
        best_paths: an initilized matrix of dimension (num_tags, len(corpus))
        vocab: a dictionary where keys are words in vocabulary and value is an index 
    Output: 
        best_probs: a completed matrix of dimension (num_tags, len(corpus))
        best_paths: a completed matrix of dimension (num_tags, len(corpus))
    '''
    # Get the number of unique POS tags (which is the num of rows in best_probs)
    num_tags = best_probs.shape[0]
    
    # Go through every word in the corpus starting from word 1
    # Recall that word 0 was initialized in `initialize()`
    for i in range(1, len(test_corpus)): 
        
        # Print number of words processed, every 5000 words
        if i % 5000 == 0:
            print("Words processed: {:>8}".format(i))
            
        ### START CODE HERE (Replace instances of 'None' with your code EXCEPT the first 'best_path_i = None') ###
        # For each unique POS tag that the current word can be
        for j in None: # complete this line
            
            # Initialize best_prob for word i to negative infinity
            best_prob_i = None
            
            # Initialize best_path for current word i to None
            best_path_i = None

            # For each POS tag that the previous word can be:
            for k in None: # complete this line
            
                # Calculate the probability = 
                # best probs of POS tag k, previous word i-1 + 
                # log(prob of transition from POS k to POS j) + 
                # log(prob that emission of POS j is word i)
                prob = None

                # check if this path's probability is greater than
                # the best probability up to and before this point
                if None: # complete this line
                    
                    # Keep track of the best probability
                    best_prob_i = None
                    
                    # keep track of the POS tag of the previous word
                    # that is part of the best path.  
                    # Save the index (integer) associated with 
                    # that previous word's POS tag
                    best_path_i = None

            # Save the best probability for the 
            # given current word's POS tag
            # and the position of the current word inside the corpus
            best_probs[j,i] = None
            
            # Save the unique integer ID of the previous POS tag
            # into best_paths matrix, for the POS tag of the current word
            # and the position of the current word inside the corpus.
            best_paths[j,i] = None

        ### END CODE HERE ###
    return best_probs, best_paths


# Run the `viterbi_forward` function to fill in the `best_probs` and `best_paths` matrices.
# 
# **Note** that this will take a few minutes to run.  There are about 30,000 words to process.

# In[ ]:


# this will take a few minutes to run => processes ~ 30,000 words
best_probs, best_paths = viterbi_forward(A, B, prep, best_probs, best_paths, vocab)


# In[ ]:


# Test this function 
print(f"best_probs[0,1]: {best_probs[0,1]:.4f}") 
print(f"best_probs[0,4]: {best_probs[0,4]:.4f}") 


# ##### Expected Output
# 
# ```CPP
# best_probs[0,1]: -24.7822
# best_probs[0,4]: -49.5601
# ```

# <a name='3.3'></a>
# ## Part 3.3 Viterbi backward
# 
# Now you will implement the Viterbi backward algorithm.
# - The Viterbi backward algorithm gets the predictions of the POS tags for each word in the corpus using the `best_paths` and the `best_probs` matrices.
# 
# The example below shows how to walk backwards through the best_paths matrix to get the POS tags of each word in the corpus. Recall that this example corpus has three words: "Loss tracks upward".
# 
# POS tag for 'upward' is `RB`
# - Select the the most likely POS tag for the last word in the corpus, 'upward' in the `best_prob` table.
# - Look for the row in the column for 'upward' that has the largest probability.
# - Notice that in row 28 of `best_probs`, the estimated probability is -34.99, which is larger than the other values in the column.  So the most likely POS tag for 'upward' is `RB` an adverb, at row 28 of `best_prob`. 
# - The variable `z` is an array that stores the unique integer ID of the predicted POS tags for each word in the corpus.  In array z, at position 2, store the value 28 to indicate that the word 'upward' (at index 2 in the corpus), most likely has the POS tag associated with unique ID 28 (which is `RB`).
# - The variable `pred` contains the POS tags in string form.  So `pred` at index 2 stores the string `RB`.
# 
# 
# POS tag for 'tracks' is `VBZ`
# - The next step is to go backward one word in the corpus ('tracks').  Since the most likely POS tag for 'upward' is `RB`, which is uniquely identified by integer ID 28, go to the `best_paths` matrix in column 2, row 28.  The value stored in `best_paths`, column 2, row 28 indicates the unique ID of the POS tag of the previous word.  In this case, the value stored here is 40, which is the unique ID for POS tag `VBZ` (verb, 3rd person singular present).
# - So the previous word at index 1 of the corpus ('tracks'), most likely has the POS tag with unique ID 40, which is `VBZ`.
# - In array `z`, store the value 40 at position 1, and for array `pred`, store the string `VBZ` to indicate that the word 'tracks' most likely has POS tag `VBZ`.
# 
# POS tag for 'Loss' is `NN`
# - In `best_paths` at column 1, the unique ID stored at row 40 is 20.  20 is the unique ID for POS tag `NN`.
# - In array `z` at position 0, store 20.  In array `pred` at position 0, store `NN`.

# <img src = "Backwards5.PNG"/>

# <a name='ex-07'></a>
# ### Exercise 07
# Implement the `viterbi_backward` algorithm, which returns a list of predicted POS tags for each word in the corpus.
# 
# - Note that the numbering of the index positions starts at 0 and not 1. 
# - `m` is the number of words in the corpus.  
#     - So the indexing into the corpus goes from `0` to `m - 1`.
#     - Also, the columns in `best_probs` and `best_paths` are indexed from `0` to `m - 1`
# 
# 
# **In Step 1:**       
# Loop through all the rows (POS tags) in the last entry of `best_probs` and find the row (POS tag) with the maximum value.
# Convert the unique integer ID to a tag (a string representation) using the list `states`.  
# 
# Referring to the three-word corpus described above:
# - `z[2] = 28`: For the word 'upward' at position 2 in the corpus, the POS tag ID is 28.  Store 28 in `z` at position 2.
# - `states[28]` is 'RB': The POS tag ID 28 refers to the POS tag 'RB'.
# - `pred[2] = 'RB'`: In array `pred`, store the POS tag for the word 'upward'.
# 
# **In Step 2:**  
# - Starting at the last column of best_paths, use `best_probs` to find the most likely POS tag for the last word in the corpus.
# - Then use `best_paths` to find the most likely POS tag for the previous word. 
# - Update the POS tag for each word in `z` and in `preds`.
# 
# Referring to the three-word example from above, read best_paths at column 2 and fill in z at position 1.  
# `z[1] = best_paths[z[2],2]`  
# 
# The small test following the routine prints the last few words of the corpus and their states to aid in debug.

# In[ ]:


# UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)
# GRADED FUNCTION: viterbi_backward
def viterbi_backward(best_probs, best_paths, corpus, states):
    '''
    This function returns the best path.
    
    '''
    # Get the number of words in the corpus
    # which is also the number of columns in best_probs, best_paths
    m = best_paths.shape[1] 
    
    # Initialize array z, same length as the corpus
    z = [None] * m
    
    # Get the number of unique POS tags
    num_tags = best_probs.shape[0]
    
    # Initialize the best probability for the last word
    best_prob_for_last_word = float('-inf')
    
    # Initialize pred array, same length as corpus
    pred = [None] * m
    
    ### START CODE HERE (Replace instances of 'None' with your code) ###
    ## Step 1 ##
    
    # Go through each POS tag for the last word (last column of best_probs)
    # in order to find the row (POS tag integer ID) 
    # with highest probability for the last word
    for k in None: # complete this line

        # If the probability of POS tag at row k 
        # is better than the previously best probability for the last word:
        if None: # complete this line
            
            # Store the new best probability for the lsat word
            best_prob_for_last_word = None
    
            # Store the unique integer ID of the POS tag
            # which is also the row number in best_probs
            z[m - 1] = None
            
    # Convert the last word's predicted POS tag
    # from its unique integer ID into the string representation
    # using the 'states' dictionary
    # store this in the 'pred' array for the last word
    pred[m - 1] = None
    
    ## Step 2 ##
    # Find the best POS tags by walking backward through the best_paths
    # From the last word in the corpus to the 0th word in the corpus
    for i in range(None, None, None): # complete this line
        
        # Retrieve the unique integer ID of
        # the POS tag for the word at position 'i' in the corpus
        pos_tag_for_word_i = None
        
        # In best_paths, go to the row representing the POS tag of word i
        # and the column representing the word's position in the corpus
        # to retrieve the predicted POS for the word at position i-1 in the corpus
        z[i - 1] = None
        
        # Get the previous word's POS tag in string form
        # Use the 'states' dictionary, 
        # where the key is the unique integer ID of the POS tag,
        # and the value is the string representation of that POS tag
        pred[i - 1] = None
        
     ### END CODE HERE ###
    return pred


# In[ ]:


# Run and test your function
pred = viterbi_backward(best_probs, best_paths, prep, states)
m=len(pred)
print('The prediction for pred[-7:m-1] is: \n', prep[-7:m-1], "\n", pred[-7:m-1], "\n")
print('The prediction for pred[0:8] is: \n', pred[0:7], "\n", prep[0:7])


# **Expected Output:**   
# 
# ```CPP
# The prediction for pred[-7:m-1] is:  
#  ['see', 'them', 'here', 'with', 'us', '.']  
#  ['VB', 'PRP', 'RB', 'IN', 'PRP', '.']   
# The prediction for pred[0:8] is:    
#  ['DT', 'NN', 'POS', 'NN', 'MD', 'VB', 'VBN']   
#  ['The', 'economy', "'s", 'temperature', 'will', 'be', 'taken'] 
# ```
# 
# Now you just have to compare the predicted labels to the true labels to evaluate your model on the accuracy metric!

# <a name='4'></a>
# # Part 4: Predicting on a data set
# 
# Compute the accuracy of your prediction by comparing it with the true `y` labels. 
# - `pred` is a list of predicted POS tags corresponding to the words of the `test_corpus`. 

# In[ ]:


print('The third word is:', prep[3])
print('Your prediction is:', pred[3])
print('Your corresponding label y is: ', y[3])


# <a name='ex-08'></a>
# ### Exercise 08
# 
# Implement a function to compute the accuracy of the viterbi algorithm's POS tag predictions.
# - To split y into the word and its tag you can use `y.split()`. 

# In[ ]:


# UNQ_C8 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)
# GRADED FUNCTION: compute_accuracy
def compute_accuracy(pred, y):
    '''
    Input: 
        pred: a list of the predicted parts-of-speech 
        y: a list of lines where each word is separated by a '\t' (i.e. word \t tag)
    Output: 
        
    '''
    num_correct = 0
    total = 0
    
    # Zip together the prediction and the labels
    for prediction, y in zip(pred, y):
        ### START CODE HERE (Replace instances of 'None' with your code) ###
        # Split the label into the word and the POS tag
        word_tag_tuple = None
        
        # Check that there is actually a word and a tag
        # no more and no less than 2 items
        if None: # complete this line
            continue 

        # store the word and tag separately
        word, tag = None
        
        # Check if the POS tag label matches the prediction
        if None: # complete this line
            
            # count the number of times that the prediction
            # and label match
            num_correct += None
            
        # keep track of the total number of examples (that have valid labels)
        total += None
        
        ### END CODE HERE ###
    return num_correct/total


# In[ ]:


print(f"Accuracy of the Viterbi algorithm is {compute_accuracy(pred, y):.4f}")


# ##### Expected Output
# 
# ```CPP
# Accuracy of the Viterbi algorithm is 0.9531
# ```
# 
# Congratulations you were able to classify the parts-of-speech with 95% accuracy. 

# ### Key Points and overview
# 
# In this assignment you learned about parts-of-speech tagging. 
# - In this assignment, you predicted POS tags by walking forward through a corpus and knowing the previous word.
# - There are other implementations that use bidirectional POS tagging.
# - Bidirectional POS tagging requires knowing the previous word and the next word in the corpus when predicting the current word's POS tag.
# - Bidirectional POS tagging would tell you more about the POS instead of just knowing the previous word. 
# - Since you have learned to implement the unidirectional approach, you have the foundation to implement other POS taggers used in industry.

# ### References
# 
# - ["Speech and Language Processing", Dan Jurafsky and James H. Martin](https://web.stanford.edu/~jurafsky/slp3/)
# - We would like to thank Melanie Tosik for her help and inspiration

#+end_example
