#+BEGIN_COMMENT
.. title: Siamese Networks: Evaluating the Model
.. slug: siamese-networks-evaluating-the-model
.. date: 2021-01-25 19:39:59 UTC-08:00
.. tags: neural networks,nlp,siamese networks
.. category: NLP
.. link: 
.. description: Evaluating our trained Siamese model.
.. type: text
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-3e14416d-6e38-4d01-9db7-2337c389132b-ssh.json
#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

* Evaluating the Siamese Network
** Imports
#+begin_src python :results none
# python
from pathlib import Path

# this project
from neurotic.nlp.siamese_networks import (
    DataGenerator,
    DataLoader,
    SiameseModel,
 )
#+end_src
** Set Up
*** The Data
#+begin_src python :results none
loader = DataLoader()
vocabulary = loader.vocabulary
data_generator = DataGenerator(loader.data.test.question_one, loader.data.test.question_two,
                          batch_size=64,
                          shuffle=False)
#+end_src
*** The Model
#+begin_src python :results none
siamese = SiameseModel(len(vocabulary))
path = Path("~/models/siamese_networks/model.pkl.gz").expanduser()
model = siamese.model.init_from_file(path)
#+end_src
* Classify
 To determine the accuracy of the model, we will utilize the test set that was configured earlier. While in training we used only positive examples, the test data, Q1_test, Q2_test and y_test, is setup as pairs of questions, some of which are duplicates some are not. 

 This routine will run all the test question pairs through the model, compute the cosine simlarity of each pair, threshold it and compare the result to  y_test - the correct response from the data set. The results are accumulated to produce an accuracy.

 **Instructions**  
  - Loop through the incoming data in batch_size chunks
  - Use the data generator to load q1, q2 a batch at a time. **Don't forget to set shuffle=False!**
  - copy a batch_size chunk of y into y_test
  - compute v1, v2 using the model
  - for each element of the batch
         - compute the cos similarity of each pair of entries, v1[j],v2[j]
         - determine if d > threshold
         - increment accuracy if that result matches the expected results (y_test[j])
  - compute the final accuracy and return
  
 Due to some limitations of this environment, running classify multiple times may result in the kernel failing. If that happens *Restart Kernal & clear output* and then run from the top. During development, consider using a smaller set of data to reduce the number of calls to model(). 

#+begin_src python :results none
def classify(test_Q1, test_Q2, y, threshold, model, vocab, data_generator=data_generator, batch_size=64):
    """Function to test the accuracy of the model.

    Args:
        test_Q1 (numpy.ndarray): Array of Q1 questions.
        test_Q2 (numpy.ndarray): Array of Q2 questions.
        y (numpy.ndarray): Array of actual target.
        threshold (float): Desired threshold.
        model (trax.layers.combinators.Parallel): The Siamese model.
        vocab (collections.defaultdict): The vocabulary used.
        data_generator (function): Data generator function. Defaults to data_generator.
        batch_size (int, optional): Size of the batches. Defaults to 64.

    Returns:
        float: Accuracy of the model.
    """
    accuracy = 0
    ### START CODE HERE (Replace instances of 'None' with your code) ###
    for i in range(0, len(test_Q1), batch_size):
        # Call the data generator (built in Ex 01) with shuffle=False using next()
        # use batch size chuncks of questions as Q1 & Q2 arguments of the data generator. e.g x[i:i + batch_size]
        # Hint: use `vocab['<PAD>']` for the `pad` argument of the data generator
        q1, q2 = None
        # use batch size chuncks of actual output targets (same syntax as example above)
        y_test = None
        # Call the model
        v1, v2 = None

        for j in range(batch_size):
            # take dot product to compute cos similarity of each pair of entries, v1[j], v2[j]
            # don't forget to transpose the second argument
            d = None
            # is d greater than the threshold?
            res = None
            # increment accurancy if y_test is equal `res`
            accuracy += None
    # compute accuracy using accuracy and total length of test questions
    accuracy = None
    ### END CODE HERE ###
    
    return accuracy
#+end_src

#+begin_src python :results output :exports both
# this takes around 1 minute
accuracy = classify(loader.data.test.question_one, loader.data.test.question_two, y_test, 0.7, model, vocab, batch_size = 512) 
print("Accuracy", accuracy)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: <ipython-input-6-e2491dc77b19> in <module>
:       1 # this takes around 1 minute
: ----> 2 accuracy = classify(Q1_test,Q2_test, y_test, 0.7, model, vocab, batch_size = 512)
:       3 print("Accuracy", accuracy)
: 
: NameError: name 'Q1_test' is not defined
:END:

# **Expected Result**  
# Accuracy ~0.69

# <a name='5'></a>
# 

#+end_example  
* Raw
#+begin_example python
# <a name='4.2'></a>
