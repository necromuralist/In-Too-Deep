#+BEGIN_COMMENT
.. title: Deep N-Grams: Batch Generation
.. slug: deep-n-grams-batch-generation
.. date: 2021-01-05 17:08:48 UTC-08:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT
* Generating Batches of Data
  - {{% lancelot title="First Post" %}}deep-n-grams{{% /lancelot %}}
  - {{% lancelot title="Previous Post" %}}deep-n-grams-loading-the-data{{% /lancelot %}}
  - {{% lancelot title="Next Post" %}}deep-n-grams-creating-the-model{{% /lancelot %}}  
#+begin_example python

# 
# Most of the time in Natural Language Processing, and AI in general we use batches when training our data sets. Here, you will build a data generator that takes in a text and returns a batch of text lines (lines are sentences).
# - The generator converts text lines (sentences) into numpy arrays of integers padded by zeros so that all arrays have the same length, which is the length of the longest sentence in the entire data set.
# 
# Once you create the generator, you can iterate on it like this:
# 
# ```
# next(data_generator)
# ```
# 
# This generator returns the data in a format that you could directly use in your model when computing the feed-forward of your algorithm. This iterator returns a batch of lines and per token mask. The batch is a tuple of three parts: inputs, targets, mask. The inputs and targets are identical. The second column will be used to evaluate your predictions. Mask is 1 for non-padding tokens.
# 
# <a name='ex02'></a>
# ### Exercise 02
# **Instructions:** Implement the data generator below. Here are some things you will need. 
# 
# - While True loop: this will yield one batch at a time.
# - if index >= num_lines, set index to 0. 
# - The generator should return shuffled batches of data. To achieve this without modifying the actual lines a list containing the indexes of `data_lines` is created. This list can be shuffled and used to get random batches everytime the index is reset.
# - if len(line) < max_length append line to cur_batch.
#     - Note that a line that has length equal to max_length should not be appended to the batch. 
#     - This is because when converting the characters into a tensor of integers, an additional end of sentence token id will be added.  
#     - So if max_length is 5, and a line has 4 characters, the tensor representing those 4 characters plus the end of sentence character will be of length 5, which is the max length.
# - if len(cur_batch) == batch_size, go over every line, convert it to an int and store it.
# 
# **Remember that when calling np you are really calling trax.fastmath.numpy which is traxâ€™s version of numpy that is compatible with JAX. As a result of this, where you used to encounter the type numpy.ndarray now you will find the type jax.interpreters.xla.DeviceArray.**

# <details>    
# <summary>
#     <font size="3" color="darkgreen"><b>Hints</b></font>
# </summary>
# <p>
# <ul>
#     <li>Use the line_to_tensor function above inside a list comprehension in order to pad lines with zeros.</li>
#     <li>Keep in mind that the length of the tensor is always 1 + the length of the original line of characters.  Keep this in mind when setting the padding of zeros.</li>
# </ul>
# </p>

# In[ ]:


# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)
# GRADED FUNCTION: data_generator
def data_generator(batch_size, max_length, data_lines, line_to_tensor=line_to_tensor, shuffle=True):
    """Generator function that yields batches of data

    Args:
        batch_size (int): number of examples (in this case, sentences) per batch.
        max_length (int): maximum length of the output tensor.
        NOTE: max_length includes the end-of-sentence character that will be added
                to the tensor.  
                Keep in mind that the length of the tensor is always 1 + the length
                of the original line of characters.
        data_lines (list): list of the sentences to group into batches.
        line_to_tensor (function, optional): function that converts line to tensor. Defaults to line_to_tensor.
        shuffle (bool, optional): True if the generator should generate random batches of data. Defaults to True.

    Yields:
        tuple: two copies of the batch (jax.interpreters.xla.DeviceArray) and mask (jax.interpreters.xla.DeviceArray).
        NOTE: jax.interpreters.xla.DeviceArray is trax's version of numpy.ndarray
    """
    # initialize the index that points to the current position in the lines index array
    index = 0
    
    # initialize the list that will contain the current batch
    cur_batch = []
    
    # count the number of lines in data_lines
    num_lines = len(data_lines)
    
    # create an array with the indexes of data_lines that can be shuffled
    lines_index = [*range(num_lines)]
    
    # shuffle line indexes if shuffle is set to True
    if shuffle:
        rnd.shuffle(lines_index)
    
    ### START CODE HERE (Replace instances of 'None' with your code) ###
    while True:
        
        # if the index is greater or equal than to the number of lines in data_lines
        if None:
            # then reset the index to 0
            index = None
            # shuffle line indexes if shuffle is set to True
            if shuffle:
                rnd.shuffle(lines_index)
            
        # get a line at the `lines_index[index]` position in data_lines
        line = None
        
        # if the length of the line is less than max_length
        if None:
            # append the line to the current batch
            cur_batch.append(None)
            
        # increment the index by one
        index += None
        
        # if the current batch is now equal to the desired batch size
        if None:
            
            batch = []
            mask = []
            
            # go through each line (li) in cur_batch
            for li in None:
                # convert the line (li) to a tensor of integers
                tensor = None
                
                # Create a list of zeros to represent the padding
                # so that the tensor plus padding will have length `max_length`
                pad = [0] * (None)
                
                # combine the tensor plus pad
                tensor_pad = None
                
                # append the padded tensor to the batch
                batch.append(None)

                # A mask for  tensor_pad is 1 wherever tensor_pad is not
                # 0 and 0 wherever tensor_pad is 0, i.e. if tensor_pad is
                # [1, 2, 3, 0, 0, 0] then example_mask should be
                # [1, 1, 1, 0, 0, 0]
                # Hint: Use a list comprehension for this
                example_mask = None
                mask.append(example_mask)
               
            # convert the batch (data type list) to a trax's numpy array
            batch_np_arr = np.array(None)
            mask_np_arr = np.array(None)
            
            ### END CODE HERE ##
            
            # Yield two copies of the batch and mask.
            yield batch_np_arr, batch_np_arr, mask_np_arr
            
            # reset the current batch to an empty list
            cur_batch = []
            


# In[ ]:


# Try out your data generator
tmp_lines = ['12345678901', #length 11
             '123456789', # length 9
             '234567890', # length 9
             '345678901'] # length 9

# Get a batch size of 2, max length 10
tmp_data_gen = data_generator(batch_size=2, 
                              max_length=10, 
                              data_lines=tmp_lines,
                              shuffle=False)

# get one batch
tmp_batch = next(tmp_data_gen)

# view the batch
tmp_batch


# ##### Expected output
# 
# ```CPP
# (DeviceArray([[49, 50, 51, 52, 53, 54, 55, 56, 57,  1],
#               [50, 51, 52, 53, 54, 55, 56, 57, 48,  1]], dtype=int32),
#  DeviceArray([[49, 50, 51, 52, 53, 54, 55, 56, 57,  1],
#               [50, 51, 52, 53, 54, 55, 56, 57, 48,  1]], dtype=int32),
#  DeviceArray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=int32))
# ```

# Now that you have your generator, you can just call them and they will return tensors which correspond to your lines in Shakespeare. The first column and the second column are identical. Now you can go ahead and start building your neural network. 

# <a name='1.4'></a>
# ### 1.4 Repeating Batch generator 
# 
# The way the iterator is currently defined, it will keep providing batches forever.
# 
# Although it is not needed, we want to show you the `itertools.cycle` function which is really useful when the generator eventually stops
# 
# Notice that it is expected to use this function within the training function further below
# 
# Usually we want to cycle over the dataset multiple times during training (i.e. train for multiple *epochs*).
# 
# For small datasets we can use [`itertools.cycle`](https://docs.python.org/3.8/library/itertools.html#itertools.cycle) to achieve this easily.

# In[ ]:


import itertools

infinite_data_generator = itertools.cycle(
    data_generator(batch_size=2, max_length=10, data_lines=tmp_lines))


# You can see that we can get more than the 5 lines in tmp_lines using this.

# In[ ]:


ten_lines = [next(infinite_data_generator) for _ in range(10)]
print(len(ten_lines))


# <a name='2'></a>
# 
#+end_example
