<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Too Deep (Posts about tensors)</title><link>https://necromuralist.github.io/In-Too-Deep/</link><description></description><atom:link href="https://necromuralist.github.io/In-Too-Deep/categories/tensors.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 23 Feb 2019 22:45:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tensors In PyTorch</title><link>https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org764ba2f"&gt;Introduction to Deep Learning with PyTorch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org2447d48"&gt;Neural Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org03fe010"&gt;Tensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#orgb7ee4ce"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org5aaeebe"&gt;The Activation Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#orgca49f3b"&gt;Generate some data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org0671081"&gt;Stack them up!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#org4a27727"&gt;Generate some data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/#orgeb72bd0"&gt;Numpy to Torch and back&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org764ba2f" class="outline-2"&gt;
&lt;h2 id="org764ba2f"&gt;Introduction to Deep Learning with PyTorch&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org764ba2f"&gt;
&lt;p&gt;
In this notebook, you'll get introduced to &lt;a href="http://pytorch.org/"&gt;PyTorch&lt;/a&gt;, a framework for building and training neural networks. PyTorch, in a lot of ways, behaves like the arrays you love from Numpy. These Numpy arrays, after all, are just tensors. PyTorch takes these tensors and makes it simple to move them to GPUs for the faster processing needed when training neural networks. It also provides a module that automatically calculates gradients (for backpropagation!) and another module specifically for building neural networks. All together, PyTorch ends up being more coherent with Python and the Numpy/Scipy stack compared to TensorFlow and other frameworks.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2447d48" class="outline-2"&gt;
&lt;h2 id="org2447d48"&gt;Neural Networks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2447d48"&gt;
&lt;p&gt;
Deep Learning is based on artificial neural networks which have been around in some form since the late 1950s. The networks are built from individual parts approximating neurons, typically called units or simply "neurons." Each unit has some number of weighted inputs. These weighted inputs are summed together (a linear combination) then passed through an activation function to get the unit's output.
&lt;/p&gt;

&lt;p&gt;
Mathematically this looks like: 
&lt;/p&gt;

&lt;p&gt;
\[
 y = f(w_1 x_1 + w_2 x_2 + b) \\
 y = f\left(\sum_i w_i x_i +b \right)
\]
&lt;/p&gt;

&lt;p&gt;
With vectors this is the dot/inner product of two vectors:
&lt;/p&gt;

&lt;p&gt;
$$
 h =  x_1 , x_2 ⋅  x_n &lt;br&gt;
 ⋅ 
&lt;/p&gt;
\begin{bmatrix}
           w_1 \\
           w_2 \\
           \vdots \\
           w_n
\end{bmatrix}
&lt;p&gt;
$$
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org03fe010" class="outline-2"&gt;
&lt;h2 id="org03fe010"&gt;Tensors&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org03fe010"&gt;
&lt;p&gt;
It turns out neural network computations are just a bunch of linear algebra operations on &lt;b&gt;tensors&lt;/b&gt;, a generalization of matrices. A vector is a 1-dimensional tensor, a matrix is a 2-dimensional tensor, an array with three indices is a 3-dimensional tensor (RGB color images for example). The fundamental data structure for neural networks are tensors and PyTorch (as well as pretty much every other deep learning framework) is built around tensors.
&lt;/p&gt;

&lt;p&gt;
Now that we have the basics covered, it's time to explore how we can use PyTorch to build a simple neural network.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb7ee4ce" class="outline-2"&gt;
&lt;h2 id="orgb7ee4ce"&gt;Imports&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb7ee4ce"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7682690" class="outline-3"&gt;
&lt;h3 id="org7682690"&gt;From PyPi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7682690"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5aaeebe" class="outline-2"&gt;
&lt;h2 id="org5aaeebe"&gt;The Activation Function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5aaeebe"&gt;
&lt;p&gt;
Using &lt;a href="https://pytorch.org/docs/stable/torch.html?highlight=exp#torch.exp"&gt;pytorch's exp&lt;/a&gt; function looks a lot like it did with numpy.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" Sigmoid activation function &lt;/span&gt;

&lt;span class="sd"&gt;	Arguments&lt;/span&gt;
&lt;span class="sd"&gt;	---------&lt;/span&gt;
&lt;span class="sd"&gt;	x: torch.Tensor&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgca49f3b" class="outline-2"&gt;
&lt;h2 id="orgca49f3b"&gt;Generate some data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgca49f3b"&gt;
&lt;p&gt;
&lt;a href="https://pytorch.org/docs/stable/torch.html?highlight=exp#torch.exp"&gt;Set the random seed&lt;/a&gt; so things are predictable.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9caee26" class="outline-3"&gt;
&lt;h3 id="org9caee26"&gt;Features&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9caee26"&gt;
&lt;p&gt;
Our features will be a tensor of 3 random normal variables created with &lt;a href="https://pytorch.org/docs/stable/torch.html?highlight=randn#torch.randn"&gt;torch.randn&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org827e22b" class="outline-3"&gt;
&lt;h3 id="org827e22b"&gt;True weights for our data, random normal variables again&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org827e22b"&gt;
&lt;p&gt;
&lt;a href="https://pytorch.org/docs/stable/torch.html?highlight=randn_like#torch.randn_like"&gt;randn_like&lt;/a&gt; creates a tensor of random numbers that is the same size as the tensor it is given.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org24f29bf" class="outline-3"&gt;
&lt;h3 id="org24f29bf"&gt;And a true bias term.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org24f29bf"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Above I generated data we can use to get the output of our simple network. This is all just random for now, going forward we'll start using normal data. Going through each relevant line:
&lt;/p&gt;

&lt;p&gt;
`features = torch.randn((1, 5))` creates a tensor with shape `(1, 5)`, one row and five columns, that contains values randomly distributed according to the normal distribution with a mean of zero and standard deviation of one. 
&lt;/p&gt;

&lt;p&gt;
`weights = torch.randn_like(features)` creates another tensor with the same shape as `features`, again containing values from a normal distribution.
&lt;/p&gt;

&lt;p&gt;
Finally, `bias = torch.randn((1, 1))` creates a single value from a normal distribution.
&lt;/p&gt;

&lt;p&gt;
PyTorch tensors can be added, multiplied, subtracted, etc, just like Numpy arrays. In general, you'll use PyTorch tensors pretty much the same way you'd use Numpy arrays. They come with some nice benefits though such as GPU acceleration which we'll get to later. For now, use the generated data to calculate the output of this simple single layer network. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Exercise&lt;/b&gt;&lt;/b&gt;: Calculate the output of the network with input features `features`, weights `weights`, and bias `bias`. Similar to Numpy, PyTorch has a &lt;a href="https://pytorch.org/docs/stable/torch.html#torch.sum"&gt;&lt;code&gt;torch.sum()&lt;/code&gt;&lt;/a&gt; function, as well as a `.sum()` method on tensors, for taking sums. Use the function `activation` defined above as the activation function.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgae09c28" class="outline-3"&gt;
&lt;h3 id="orgae09c28"&gt;Calculate the output of this network using the weights and bias tensors&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgae09c28"&gt;
&lt;p&gt;
You can do the multiplication and sum in the same operation using a matrix multiplication. In general, you'll want to use matrix multiplications since they are more efficient and accelerated using modern libraries and high-performance computing on GPUs.
&lt;/p&gt;

&lt;p&gt;
Here, we want to do a matrix multiplication of the features and the weights. For this we can use [`torch.mm()`] or &lt;a href="https://pytorch.org/docs/stable/torch.html#torch.mm"&gt;&lt;code&gt;torch.matmul()&lt;/code&gt;&lt;/a&gt; which is somewhat more complicated and supports broadcasting. If we try to do it with `features` and `weights` as they are, we'll get an error:
&lt;/p&gt;

&lt;pre class="example"&gt;
torch.mm(features, weights);
 
 ---------------------------------------------------------------------------
 RuntimeError                              Traceback (most recent call last)
 &amp;lt;python-input-13-15d592eb5279&amp;gt; in &amp;lt;module&amp;gt;()
 ----&amp;gt; 1 torch.mm(features, weights)
 
 RuntimeError: size mismatch, m1: [1 x 5], m2: [1 x 5] at /Users/soumith/minicondabuild3/conda-bld/pytorch_1524590658547/work/aten/src/TH/generic/THTensorMath.c:2033
&lt;/pre&gt;


&lt;p&gt;
As you're building neural networks in any framework, you'll see this often. Really often. What's happening here is our tensors aren't the correct shapes to perform a matrix multiplication. Remember that for matrix multiplications, the number of columns in the first tensor must equal to the number of rows in the second column. Both `features` and `weights` have the same shape, `(1, 5)`. This means we need to change the shape of `weights` to get the matrix multiplication to work.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; To see the shape of a tensor called `tensor`, use `tensor.shape`. If you're building neural networks, you'll be using this method often.
&lt;/p&gt;

&lt;p&gt;
There are a few options here: &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.reshape"&gt;&lt;code&gt;weights.reshape()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.resize_"&gt;&lt;code&gt;weights.resize_()&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view"&gt;&lt;code&gt;weights.view()&lt;/code&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
-`weights.reshape(a, b)` will return a new tensor with the same data as `weights` with size `(a, b)` sometimes, and sometimes a clone, as in it copies the data to another part of memory.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;`weights.resize_(a, b)` returns the same tensor with a different shape. However, if the new shape results in fewer elements than the original tensor, some elements will be removed from the tensor (but not from memory). If the new shape results in more elements than the original tensor, new elements will be uninitialized in memory. Here I should note that the underscore at the end of the method denotes that this method is performed &lt;b&gt;&lt;b&gt;in-place&lt;/b&gt;&lt;/b&gt;. Here is a great forum thread to &lt;a href="https://discuss.pytorch.org/t/what-is-in-place-operation/16244"&gt;read more about in-place operations&lt;/a&gt; in PyTorch.&lt;/li&gt;

&lt;li&gt;`weights.view(a, b)` will return a new tensor with the same data as `weights` with size `(a, b)`.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I usually use `.view()`, but any of the three methods will work for this. So, now we can reshape `weights` to have five rows and one column with something like `weights.view(5, 1)`.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Exercise&lt;/b&gt;&lt;/b&gt;: Calculate the output of our little network using matrix multiplication.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor(0.1595)

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0671081" class="outline-2"&gt;
&lt;h2 id="org0671081"&gt;Stack them up!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0671081"&gt;
&lt;p&gt;
That's how you can calculate the output for a single neuron. The real power of this algorithm happens when you start stacking these individual units into layers and stacks of layers, into a network of neurons. The output of one layer of neurons becomes the input for the next layer. With multiple input units and output units, we now need to express the weights as a matrix.
&lt;/p&gt;

&lt;p&gt;
The first layer shown on the bottom here are the inputs, understandably called the &lt;b&gt;&lt;b&gt;input layer&lt;/b&gt;&lt;/b&gt;. The middle layer is called the &lt;b&gt;&lt;b&gt;hidden layer&lt;/b&gt;&lt;/b&gt;, and the final layer (on the right) is the &lt;b&gt;&lt;b&gt;output layer&lt;/b&gt;&lt;/b&gt;. We can express this network mathematically with matrices again and use matrix multiplication to get linear combinations for each unit in one operation. For example, the hidden layer (\(h_1\) and \(h_2\) here) can be calculated 
&lt;/p&gt;

&lt;p&gt;
\[
\vec{h} = [h_1 \, h_2] = 
&lt;/p&gt;
\begin{bmatrix}
x_1 \, x_2 \cdots \, x_n
\end{bmatrix}
&lt;p&gt;
⋅ 
&lt;/p&gt;
\begin{bmatrix}
           w_{11} &amp;amp; w_{12} \\
           w_{21} &amp;amp;w_{22} \\
           \vdots &amp;amp;\vdots \\
           w_{n1} &amp;amp;w_{n2}
\end{bmatrix}
&lt;p&gt;
\]
&lt;/p&gt;

&lt;p&gt;
The output for this small network is found by treating the hidden layer as inputs for the output unit. The network output is expressed simply
&lt;/p&gt;

&lt;p&gt;
\[
 y =  f_2 \! \left(\, f_1 \! \left(\vec{x} \, \mathbf{W_1}\right) \mathbf{W_2} \right)
\]
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4a27727" class="outline-2"&gt;
&lt;h2 id="org4a27727"&gt;Generate some data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4a27727"&gt;
&lt;p&gt;
Set the random seed so things are predictable
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The features are 3 random normal variables that will be your input.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Define the size of each layer in our network
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Number of input units, must match number of input features&lt;/span&gt;
&lt;span class="n"&gt;n_hidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                    &lt;span class="c1"&gt;# Number of hidden units &lt;/span&gt;
&lt;span class="n"&gt;n_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                    &lt;span class="c1"&gt;# Number of output units&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Weights for inputs to hidden layer
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_hidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Weights for hidden layer to output layer
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;W2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_hidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
and bias terms for hidden and output layers
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_hidden&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;B2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_output&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Exercise:&lt;/b&gt;&lt;/b&gt; Calculate the output for this multi-layer network using the weights `W1` &amp;amp; `W2`, and the biases, `B1` &amp;amp; `B2`. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input_layer_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B1&lt;/span&gt;
&lt;span class="n"&gt;hidden_layer_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_layer_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hidden_layer_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0.4813]])

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mf"&gt;0.4813&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_allclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hidden_layer_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.000305&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you did this correctly, you should see the output &lt;code&gt;tensor([[ 0.4813]])&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
The number of hidden units a parameter of the network, often called a &lt;b&gt;&lt;b&gt;hyperparameter&lt;/b&gt;&lt;/b&gt; to differentiate it from the weights and biases parameters. As you'll see later when we discuss training a neural network, the more hidden units a network has, and the more layers, the better able it is to learn from data and make accurate predictions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgeb72bd0" class="outline-2"&gt;
&lt;h2 id="orgeb72bd0"&gt;Numpy to Torch and back&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeb72bd0"&gt;
&lt;p&gt;
Special bonus section! PyTorch has a great feature for converting between Numpy arrays and Torch tensors. To create a tensor from a Numpy array, use &lt;a href="https://pytorch.org/docs/stable/torch.html?highlight=from_numpy#torch.from_numpy"&gt;torch.from_numpy()&lt;/a&gt;. To convert a tensor to a Numpy array, use the &lt;a href="https://pytorch.org/docs/stable/tensors.html?highlight=numpy#torch.Tensor.numpy"&gt;.numpy()&lt;/a&gt; method.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[[0.07665652 0.06831265 0.7607324 ]
 [0.71495335 0.34479699 0.67489027]
 [0.45834284 0.78789824 0.40383355]
 [0.28864364 0.21713754 0.62036028]]

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_numpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0.0767, 0.0683, 0.7607],
        [0.7150, 0.3448, 0.6749],
        [0.4583, 0.7879, 0.4038],
        [0.2886, 0.2171, 0.6204]], dtype=torch.float64)

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[[0.07665652 0.06831265 0.7607324 ]
 [0.71495335 0.34479699 0.67489027]
 [0.45834284 0.78789824 0.40383355]
 [0.28864364 0.21713754 0.62036028]]

&lt;/pre&gt;

&lt;p&gt;
The memory is shared between the Numpy array and Torch tensor, so if you change the values in-place of one object, the other will change as well.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Multiply PyTorch Tensor by 2, in place&lt;/i&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Numpy array matches new values from Tensor
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[[0.15331305 0.1366253  1.52146479]
 [1.4299067  0.68959399 1.34978053]
 [0.91668568 1.57579648 0.80766711]
 [0.57728729 0.43427509 1.24072056]]

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lectures</category><category>pytorch</category><category>tensors</category><guid>https://necromuralist.github.io/In-Too-Deep/posts/nano/pytorch/tensors-in-pytorch/</guid><pubDate>Mon, 12 Nov 2018 00:02:32 GMT</pubDate></item></channel></rss>