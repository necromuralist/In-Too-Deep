<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Too Deep (Posts about logistic regression)</title><link>https://necromuralist.github.io/In-Too-Deep/</link><description></description><atom:link href="https://necromuralist.github.io/In-Too-Deep/categories/logistic-regression.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Tue, 19 Feb 2019 23:25:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Logistic Regression</title><link>https://necromuralist.github.io/In-Too-Deep/posts/nano/introduction-to-neural-networks/logistic-regression/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/introduction-to-neural-networks/logistic-regression/#org82f326b"&gt;What is Logistic Regression?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/introduction-to-neural-networks/logistic-regression/#org60f8066"&gt;The Error Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org82f326b" class="outline-2"&gt;
&lt;h2 id="org82f326b"&gt;What is Logistic Regression?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org82f326b"&gt;
&lt;p&gt;
Logistic Regression is a classification algorithm that estimates the probability of a classification given an input. It is one of the foundations of deep learning.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org60f8066" class="outline-2"&gt;
&lt;h2 id="org60f8066"&gt;The Error Function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org60f8066"&gt;
&lt;p&gt;
\[
error = -\frac{1}{m} \sum^m_{i=1} (1-y)\ln(1-\hat{y}) + y \ln \hat{y}
\]
&lt;/p&gt;

&lt;p&gt;
To build our model we add weights (W) and a bias term (b) to the error function \(E(W,b)\).
&lt;/p&gt;

&lt;p&gt;
\[
E(W,b) = -\frac{1}{m} \sum^m_{i=1} (1-y_i)\ln(1-\sigma(Wx^{(i)}) + b) + y_i \ln(\sigma(Wx^{(i)} + b))
\]
&lt;/p&gt;

&lt;p&gt;
This is the function for the binary case, but you can generalize it to more cases using this function.
&lt;/p&gt;

&lt;p&gt;
\[
E(W, b) = -\frac{1}{m} \sum^m_{i=1} \sum^n_{j=1} y_{ij} \ln(\hat{y_{ij}})
\]
&lt;/p&gt;

&lt;p&gt;
The goal is to minimize this function to get the best model.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>lecture</category><category>logistic regression</category><guid>https://necromuralist.github.io/In-Too-Deep/posts/nano/introduction-to-neural-networks/logistic-regression/</guid><pubDate>Fri, 26 Oct 2018 14:44:43 GMT</pubDate></item></channel></rss>