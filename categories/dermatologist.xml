<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In Too Deep (Posts about dermatologist)</title><link>https://necromuralist.github.io/In-Too-Deep/</link><description></description><atom:link href="https://necromuralist.github.io/In-Too-Deep/categories/dermatologist.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Tue, 19 Feb 2019 23:25:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dermatologist Mini-Project</title><link>https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#org08b5260"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#orgbe548f0"&gt;Data Sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#orgb0e534c"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#orgdd0d273"&gt;The Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#org3fbe937"&gt;The Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#orgd058d03"&gt;Prepping The Test File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/#orgf4d09fc"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org08b5260" class="outline-2"&gt;
&lt;h2 id="org08b5260"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org08b5260"&gt;
&lt;p&gt;
This is an exercise in using transfer learning to diagnose melanoma based on images of skin legions. There are three diseases to be detected:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Melanoma&lt;/li&gt;
&lt;li&gt;Nevus&lt;/li&gt;
&lt;li&gt;Sebhorrheic Keratosis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There is a paper online &lt;a href="https://arxiv.org/pdf/1710.05006.pdf"&gt;here&lt;/a&gt; (PDF link) that describes the approaches that did best in the competition.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbe548f0" class="outline-2"&gt;
&lt;h2 id="orgbe548f0"&gt;Data Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbe548f0"&gt;
&lt;p&gt;
The data is taken from the &lt;a href="https://challenge.kitware.com/#challenge/583f126bcad3a51cc66c8d9a"&gt;ISIC 2017: Skin Lesion Analysis Towards Melanoma Detection&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/train.zip"&gt;Training Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/valid.zip"&gt;Validation Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/test.zip"&gt;Test Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Each folder contains three sub-folders:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;melanoma/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nevus/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seborrheic_keratosis/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb0e534c" class="outline-2"&gt;
&lt;h2 id="orgb0e534c"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb0e534c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org86163f3" class="outline-3"&gt;
&lt;h3 id="org86163f3"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org86163f3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb3a8659" class="outline-4"&gt;
&lt;h4 id="orgb3a8659"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb3a8659"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from pathlib import Path
import warnings
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb1da225" class="outline-4"&gt;
&lt;h4 id="orgb1da225"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb1da225"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from dotenv import load_dotenv
from PIL import Image, ImageFile
from torchvision import datasets
import matplotlib
warnings.filterwarnings("ignore", category=matplotlib.cbook.mplDeprecation)
import matplotlib.pyplot as pyplot
import matplotlib.image as mpimage
import matplotlib.patches as patches
import numpy
import pyttsx3
import seaborn
import torch
import torchvision.models as models
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optimizer
import torchvision.transforms as transforms
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga38f1c2" class="outline-4"&gt;
&lt;h4 id="orga38f1c2"&gt;This Project&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga38f1c2"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from neurotic.tangles.data_paths import (Batches, DataPathTwo, DataSets,
					 TrainingTestingValidationPaths,
					 Transformer)
from neurotic.tangles.models import Inception
from neurotic.tangles.timer import Timer
from neurotic.tangles.trainer import Trainer
from neurotic.tangles.logging import Tee
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc677275" class="outline-3"&gt;
&lt;h3 id="orgc677275"&gt;Plotting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc677275"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")
seaborn.set(style="whitegrid",
	    rc={"axes.grid": False,
		"font.family": ["sans-serif"],
		"font.sans-serif": ["Open Sans", "Latin Modern Sans", "Lato"],
		"figure.figsize": (8, 6)},
	    font_scale=1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgace4926" class="outline-3"&gt;
&lt;h3 id="orgace4926"&gt;Set the Random Seed&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgace4926"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;numpy.random.seed(seed=2019)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d05cd9" class="outline-3"&gt;
&lt;h3 id="org7d05cd9"&gt;Handle Truncated Images&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7d05cd9"&gt;
&lt;p&gt;
There seems to be at least one image that is truncated which will cause an exception when it's loaded so this next setting lets us ignore the error and keep working.
&lt;/p&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ImageFile.LOAD_TRUNCATED_IMAGES = True
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org70f9f63" class="outline-3"&gt;
&lt;h3 id="org70f9f63"&gt;Constants&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org70f9f63"&gt;
&lt;p&gt;
These are some global constants
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5f3002b" class="outline-3"&gt;
&lt;h3 id="org5f3002b"&gt;Load Dotenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5f3002b"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;load_dotenv()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2f68259" class="outline-4"&gt;
&lt;h4 id="org2f68259"&gt;Model Path&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2f68259"&gt;
&lt;p&gt;
This is where to save the best model.
&lt;/p&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MODEL_PATH = DataPathTwo(folder_key="MODELS")
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdd0d273" class="outline-2"&gt;
&lt;h2 id="orgdd0d273"&gt;The Model&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdd0d273"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb526550" class="outline-3"&gt;
&lt;h3 id="orgb526550"&gt;The Training&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb526550"&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;load_dotenv()
EPOCHS = 100
transfer_path = MODEL_PATH.folder.joinpath("model_transfer.pt")
directory = "~/logs/dermatalogist"
training_log = Tee(log_name="inception_train.log", directory_name=directory)
testing_log = Tee(log_name="inception_test.log", directory_name=directory)
data_sets = DataSets()
inception = Inception(data_sets.class_count)
batches = Batches(data_sets)
trainer = Trainer(training_batches=batches.training,
		  validation_batches=batches.validation,
		  testing_batches=batches.testing,
		  model=inception.model,
		  model_path=transfer_path,
		  optimizer=inception.optimizer,
		  criterion=inception.criterion ,
		  device=inception.device,
		  epochs=EPOCHS,
		  epoch_start=1,
		  is_inception=True,
		  load_model=False,
		  training_log=training_log,
		  testing_log=testing_log,
		  beep=True,
)
&lt;/pre&gt;&lt;/div&gt;

/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trainer()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Starting Training
Started: 2019-01-26 13:59:40.249210
Started: 2019-01-26 13:59:40.249398
Ended: 2019-01-26 14:16:25.675136
Elapsed: 0:16:45.425738
Epoch: 1	Training - Loss: 0.85	Accuracy: 0.67	Validation - Loss: 0.97	Accuracy: 0.53
Validation loss decreased (inf --&amp;gt; 0.973706). Saving model ...
Started: 2019-01-26 14:16:26.913182
Ended: 2019-01-26 14:33:23.108155
Elapsed: 0:16:56.194973
Epoch: 2	Training - Loss: 0.78	Accuracy: 0.68	Validation - Loss: 0.93	Accuracy: 0.56
Validation loss decreased (0.973706 --&amp;gt; 0.934509). Saving model ...
Ended: 2019-01-26 14:33:23.997547
Elapsed: 0:16:57.084365

Starting Testing
Started: 2019-01-26 14:33:24.706175
Test Loss: 0.697
Test Accuracy: 70.95 (1419.0/2000)
Ended: 2019-01-26 14:47:30.356073
Elapsed: 0:14:05.649898
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3fbe937" class="outline-2"&gt;
&lt;h2 id="org3fbe937"&gt;The Testing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3fbe937"&gt;
&lt;p&gt;
The remote session died so I'll just load the test output.
&lt;/p&gt;
/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;testing_log = Tee(log_name="inception_test.log", directory_name="~/logs/dermatologist")
with testing_log.path.open() as reader:
    for line in reader:
	print(line.rstrip())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;

Starting Testing
Test Loss: 0.620
Test Accuracy: 74.80 (1496.0/2000)

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd058d03" class="outline-2"&gt;
&lt;h2 id="orgd058d03"&gt;Prepping The Test File&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd058d03"&gt;
&lt;p&gt;
To check the model you need to create a CSV file with three columns.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Column&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Description&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;Id&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Path to the file&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;data/test/melanoma/ISIC_0012258.jpg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;task_1&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Is melanoma&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;task_2&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Is seborrheic keratosis&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Predictions:
    """Maps the test data to a predictions file

    Args:
     model_path: path to the stored model parameters
     device: processor to use
     output_path: path to the CSV to output
     test_path: path to the test folder
     inception: object with the model
    """
    def __init__(self, model_path: Path,
		 device: torch.device,
		 output_path: Path,
		 test_path: Path,
		 data_sets: DataSets=None,                 
		 inception: Inception=None) -&amp;gt; None:
	self.model_path = model_path
	self.output_path = output_path
	self.test_path = test_path
	self._device = device
	self._data_sets = data_sets
	self._activation = None
	self.inception = inception
	return

    @property
    def data_sets(self) -&amp;gt; DataSets:
	"""the data-sets"""
	if self._data_sets is None:
	    self._data_sets = DataSets()
	return self._data_sets

    @property
    def device(self):
	"""The processor to use"""
	if self._device is None:
	    self._device = torch.device("cuda"
					if torch.cuda.is_available()
					else "cpu")
	return self._device

    @property
    def inception(self) -&amp;gt; Inception:
	"""The Inception Object"""
	if self._inception is None:
	    self._inception = Inception(
		classel= self.data_sets.class_count,
		model_path=self.model_path,
		device=self.device)
	    self._inception.model.eval()
	return self._inception

    @property
    def activation(self) -&amp;gt; nn.Sigmoid:
	"""The non-linear activation"""
	if self._activation is None:
	    self._activation = nn.Sigmoid()
	return self._activation

    @inception.setter
    def inception(self, new_inception: Inception) -&amp;gt; None:
	"""Sets the inception model to eval only"""
	self._inception = new_inception
	self._inception.model.eval()
	return

    def prediction(self, image_path: Path) -&amp;gt; numpy.ndarray:
	"""Calculate predicted class for an image

	Args:
	 image_path: path to an inmage file
	Returns:
	 array with the probabilities for each disease
	"""
	model = self.inception.model        
	image = Image.open(image_path)
	tensor = self.data_sets.transformer.testing(image)
	# add a batch number
	tensor = tensor.unsqueeze_(0)
	tensor = tensor.to(self.inception.device)
	x = torch.autograd.Variable(tensor)
	output = torch.exp(model(x))
	_, top_class = output.topk(1, dim=1)
	return top_class.item()

    def __call__(self) -&amp;gt; None:
	"""Creates CSV of predictions"""
	with self.output_path.open("w") as writer:
	    writer.write("Id,task_1,task_2\n")
	    for category in self.test_path.iterdir():
		for path in category.iterdir():
		    identifier = 'data/' + str(path).split("/dermatologist/")[-1]
		    guess = self.prediction(path)
		    first = 0 if guess else 1
		    second = 1 if guess == 2 else 0
		    writer.write("{},{},{}\n".format(identifier,
						     first,
						     second))
	return
&lt;/pre&gt;&lt;/div&gt;

/home/brunhilde/.virtualenvs/In-Too-Deep/bin/python3: No module named virtualfish
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIMER = Timer()
test_path = DataPathTwo(folder_key="TEST").folder
csv_output = Path("~/documents/pcloud_drive/outcomes/dermatologist/predictions.csv").expanduser()

predictions = Predictions(model_path=transfer_path,
			  device=inception.device,
			  output_path=csv_output,
			  test_path=test_path,
			  data_sets=data_sets,
			  inception=inception)
with TIMER:
    predictions()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Started: 2019-01-29 22:36:10.975682
Ended: 2019-01-29 22:46:47.190355
Elapsed: 0:10:36.214673

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4d09fc" class="outline-2"&gt;
&lt;h2 id="orgf4d09fc"&gt;References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4d09fc"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/udacity/dermatologist-ai"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cnn</category><category>dermatologist</category><category>project</category><category>transfer learning</category><guid>https://necromuralist.github.io/In-Too-Deep/posts/nano/dermatologist/dermatologist-mini-project/</guid><pubDate>Thu, 17 Jan 2019 05:17:45 GMT</pubDate></item></channel></rss>