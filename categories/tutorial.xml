<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neurotic Networking (Posts about tutorial)</title><link>https://necromuralist.github.io/Neurotic-Networking/</link><description></description><atom:link href="https://necromuralist.github.io/Neurotic-Networking/categories/tutorial.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by/4.0/"&gt;&lt;img id="license-image" alt="Creative Commons License" style="border-width:0" src="https://licensebuttons.net/l/by/4.0/80x15.png" /&gt;&lt;/a&gt;This work is licensed under a &lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.</copyright><lastBuildDate>Tue, 09 Mar 2021 06:02:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Pytorch 60 Minute Blitz</title><link>https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org7179908"&gt;The Departure&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org554d2d3"&gt;Imports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#orgc2d818f"&gt;PyPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#orgcf9fb4d"&gt;The Initiation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org9b54159"&gt;What is PyTorch?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#orgbbb1b99"&gt;Tensors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org938fc19"&gt;Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org5a33900"&gt;Torch to Numpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#orga4eb0ee"&gt;Numpy to Torch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org2d873df"&gt;Cuda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org7ecfe2e"&gt;Autograd: Automatic Differentiation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org25eff36"&gt;Backpropagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org07a69ab"&gt;Context Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org6788827"&gt;Neural Networks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org75b1315"&gt;A Typical Model Training Procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org75ebfe4"&gt;Defining the Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org9d9a6d7"&gt;The Loss Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org34341e4"&gt;Backpropagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org394b645"&gt;Update the Weights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org0746c22"&gt;Training a Classifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org76464e6"&gt;Data Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/#org614d9e7"&gt;The Return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7179908" class="outline-2"&gt;
&lt;h2 id="org7179908"&gt;The Departure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7179908"&gt;
&lt;p&gt;
This is a replication of &lt;a href="https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html"&gt;Deep Learning With Pytorch: A 60 Minute Blitz&lt;/a&gt; to get me back into using &lt;a href="https://pytorch.org"&gt;PyTorch&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org554d2d3" class="outline-3"&gt;
&lt;h3 id="org554d2d3"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org554d2d3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc2d818f" class="outline-4"&gt;
&lt;h4 id="orgc2d818f"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc2d818f"&gt;
&lt;p&gt;
Although the project is called PyTorch, the package is named &lt;code&gt;torch&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import torch
import torch.nn as neural_network
import torch.nn.functional as functional
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And we're going to use numpy a little.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import numpy
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcf9fb4d" class="outline-2"&gt;
&lt;h2 id="orgcf9fb4d"&gt;The Initiation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcf9fb4d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9b54159" class="outline-3"&gt;
&lt;h3 id="org9b54159"&gt;What is PyTorch?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9b54159"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbbb1b99" class="outline-4"&gt;
&lt;h4 id="orgbbb1b99"&gt;Tensors&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbbb1b99"&gt;
&lt;p&gt;
In PyTorch, &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor"&gt;tensors&lt;/a&gt; are similar to numpy's &lt;a href="https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html"&gt;ndarrays&lt;/a&gt; (n-dimensional arrays). You can create an unitialized one using the &lt;code&gt;empty&lt;/code&gt; function.
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org7007e01"&gt;&lt;/a&gt;Empty&lt;br&gt;
&lt;div class="outline-text-5" id="text-org7007e01"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;empty_tensor = torch.empty(5, 3)
print(empty_tensor)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[-2.3492e+02,  4.5902e-41, -2.3492e+02],
        [ 4.5902e-41,  3.1766e+30,  1.7035e+25],
        [ 4.0498e-43,  0.0000e+00, -2.3492e+02],
        [ 4.5902e-41,  2.6417e-37,  0.0000e+00],
        [ 1.4607e-19,  1.8469e+25,  1.0901e+27]])
&lt;/pre&gt;


&lt;p&gt;
Here's the docstring for &lt;code&gt;empty&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.empty.__doc__)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example" id="orga097357"&gt;

empty(*sizes, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -&amp;gt; Tensor

Returns a tensor filled with uninitialized data. The shape of the tensor is
defined by the variable argument :attr:`sizes`.

Args:
    sizes (int...): a sequence of integers defining the shape of the output tensor.
        Can be a variable number of arguments or a collection like a list or tuple.
    out (Tensor, optional): the output tensor
    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.
        Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).
    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.
        Default: ``torch.strided``.
    device (:class:`torch.device`, optional): the desired device of returned tensor.
        Default: if ``None``, uses the current device for the default tensor type
        (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU
        for CPU tensor types and the current CUDA device for CUDA tensor types.
    requires_grad (bool, optional): If autograd should record operations on the
        returned tensor. Default: ``False``.

Example::

    &amp;gt;&amp;gt;&amp;gt; torch.empty(2, 3)
    tensor(1.00000e-08 *
           [[ 6.3984,  0.0000,  0.0000],
            [ 0.0000,  0.0000,  0.0000]])


&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgb8190ac"&gt;&lt;/a&gt;Random&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb8190ac"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.rand(5, 3))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0.1767, 0.9520, 0.1488],
        [0.5592, 0.4836, 0.2645],
        [0.8066, 0.8864, 0.1083],
        [0.9206, 0.7311, 0.1278],
        [0.0140, 0.5370, 0.3123]])
&lt;/pre&gt;


&lt;p&gt;
The arguments are the same as for empty.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgece374f"&gt;&lt;/a&gt;Zeros&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgece374f"&gt;
&lt;p&gt;
Here we'll create a tensor of zeros as long integers.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.zeros(5, 3, dtype=torch.long))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]])
&lt;/pre&gt;


&lt;p&gt;
Once again the argument for &lt;code&gt;zeros&lt;/code&gt; is the same as those for &lt;code&gt;empty&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org60f2e3d"&gt;&lt;/a&gt;From Data&lt;br&gt;
&lt;div class="outline-text-5" id="text-org60f2e3d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.tensor([5.5, 3]))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([5.5000, 3.0000])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgb1a3b7c"&gt;&lt;/a&gt;From A Tensor&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb1a3b7c"&gt;
&lt;p&gt;
You can create a new tensor from a previously constructed one. This preserves any parameters you passed in that you don't subsequently override.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = torch.tensor([5, 3], dtype=torch.int)
print(x)
y = x.new_ones(5, 3)
print(y)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([5, 3], dtype=torch.int32)
tensor([[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], dtype=torch.int32)
&lt;/pre&gt;


&lt;p&gt;
PyTorch also has another syntax for creating a random tensor from another tensor.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.randn_like(x, dtype=torch.float))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([ 0.6447, -0.9750])
&lt;/pre&gt;


&lt;p&gt;
So in this case it kept the shape but used our dtype. The values seemed odd at first, but that's because the &lt;code&gt;randn&lt;/code&gt; indicates it comes from a standard-normal distribution centered at 0, not some value in the range from zero to one (non-inclusive) like a regular random function would.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org3a3b7b6"&gt;&lt;/a&gt;Tensor Size&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3a3b7b6"&gt;
&lt;p&gt;
Like pandas, the tensor has a shape, but confusingly it's called &lt;code&gt;Size&lt;/code&gt; and can be accessed either from the &lt;code&gt;size&lt;/code&gt; method of the &lt;code&gt;shape&lt;/code&gt; attribute.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(y.size())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
torch.Size([5, 3])
&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(y.shape)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
torch.Size([5, 3])
&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(torch.Size.__base__)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'tuple'&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
The &lt;code&gt;Size&lt;/code&gt; object inherits from tuples and supports all the tuple operations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org938fc19" class="outline-4"&gt;
&lt;h4 id="org938fc19"&gt;Operations&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org938fc19"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org5e78ba7"&gt;&lt;/a&gt;Addition&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5e78ba7"&gt;
&lt;p&gt;
For some operations you can use either the operators (like &lt;code&gt;+&lt;/code&gt;) or method calls. Here's two ways to do addition.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SIZE = (5, 3)
x = torch.rand(*SIZE)
y = torch.rand(*SIZE)
output = x + y
print(output)
print()
print(torch.add(x, y))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example" id="org3581993"&gt;
tensor([[0.4370, 1.4905, 0.8806],
        [1.7555, 0.9883, 0.8121],
        [1.1988, 0.6291, 1.2755],
        [1.2424, 1.1548, 1.1025],
        [0.8627, 0.9954, 1.1028]])

tensor([[0.4370, 1.4905, 0.8806],
        [1.7555, 0.9883, 0.8121],
        [1.1988, 0.6291, 1.2755],
        [1.2424, 1.1548, 1.1025],
        [0.8627, 0.9954, 1.1028]])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org3420267"&gt;&lt;/a&gt;Pre-Made Tensors&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3420267"&gt;
&lt;p&gt;
One advantage to using the function is that you can pass in a tensor, rather than having pytorch create the output-tensor for you.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;summation = torch.empty(SIZE)
torch.add(x, y, out=summation)
print(summation)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0.4370, 1.4905, 0.8806],
        [1.7555, 0.9883, 0.8121],
        [1.1988, 0.6291, 1.2755],
        [1.2424, 1.1548, 1.1025],
        [0.8627, 0.9954, 1.1028]])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org06fe49d"&gt;&lt;/a&gt;In-Place Operations&lt;br&gt;
&lt;div class="outline-text-5" id="text-org06fe49d"&gt;
&lt;p&gt;
Tensors also have methods that let you update them instead of creating a new tensor.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x.add_(y)
print(x)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[0.4370, 1.4905, 0.8806],
        [1.7555, 0.9883, 0.8121],
        [1.1988, 0.6291, 1.2755],
        [1.2424, 1.1548, 1.1025],
        [0.8627, 0.9954, 1.1028]])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org4f95387"&gt;&lt;/a&gt;Slicing&lt;br&gt;
&lt;div class="outline-text-5" id="text-org4f95387"&gt;
&lt;p&gt;
The slicing follows what numpy's arrays do. Here's how to get all the rows of the second column.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(x[:, 1])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([1.4905, 0.9883, 0.6291, 1.1548, 0.9954])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org06b29b6"&gt;&lt;/a&gt;Reshaping&lt;br&gt;
&lt;div class="outline-text-5" id="text-org06b29b6"&gt;
&lt;p&gt;
You can create a new tensor with the same data but a different shape using the &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.view"&gt;view&lt;/a&gt; method.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;y = x.view(15)
z = x.view(-1, 5)
print(x.shape)
print(y.shape)
print(z.shape)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
torch.Size([5, 3])
torch.Size([15])
torch.Size([3, 5])
&lt;/pre&gt;


&lt;p&gt;
Using &lt;code&gt;-1&lt;/code&gt; tells pytorch to infer the dimension based on the original and the dimension that you did pass in.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5a33900" class="outline-4"&gt;
&lt;h4 id="org5a33900"&gt;Torch to Numpy&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5a33900"&gt;
&lt;p&gt;
While there are advantages to using torch for operations (it can use the GPU, for instance), there might be times when you want to convert the tensor to a numpy array.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = torch.zeros(5)
print(x)
y = x.numpy()
print(y)
x.add_(1)
print(x)
print(y)
print(type(y))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([0., 0., 0., 0., 0.])
[0. 0. 0. 0. 0.]
tensor([1., 1., 1., 1., 1.])
[1. 1. 1. 1. 1.]
&amp;lt;class 'numpy.ndarray'&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
Somehow updating the tensor in place updates the numpy array as well, even though it's an ndarray.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga4eb0ee" class="outline-4"&gt;
&lt;h4 id="orga4eb0ee"&gt;Numpy to Torch&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga4eb0ee"&gt;
&lt;p&gt;
You can go the other way as well.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = numpy.zeros(5)
print(x)
y = torch.from_numpy(x)
print(y)
x += 5
print(y)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[0. 0. 0. 0. 0.]
tensor([0., 0., 0., 0., 0.], dtype=torch.float64)
tensor([5., 5., 5., 5., 5.], dtype=torch.float64)
&lt;/pre&gt;


&lt;p&gt;
So updating the array (in place) updates the tensor.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d873df" class="outline-4"&gt;
&lt;h4 id="org2d873df"&gt;Cuda&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2d873df"&gt;
&lt;p&gt;
As I mentioned before, an advantage of pytorch tensors is that they can be run on the GPU - unfortunately the computer I'm on is old and CUDA doesn't run on it, but we can make a check to see if it will first using =torch.cuda.is_available()
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
print(device)

x = torch.ones(5)

# pass in the device
y = torch.ones_like(x, device=device)

# or move the tensor to the device (not an inplace operation)
x = x.to(device)

z = x + y
print(z)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7ecfe2e" class="outline-3"&gt;
&lt;h3 id="org7ecfe2e"&gt;Autograd: Automatic Differentiation&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7ecfe2e"&gt;
&lt;p&gt;
The &lt;a href="https://pytorch.org/docs/stable/autograd.html"&gt;autograd&lt;/a&gt; module in pytorch performs automatic differentiation for you. It works using &lt;i&gt;define-by-run&lt;/i&gt;, meaning that as you run you forward-pass through the network, it tracks your calls so you don't have to explicitly define anything for backpropagation to work. To enable or disable it you set the &lt;code&gt;requires_grad&lt;/code&gt; attribute of the tensor you want to train.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tense = torch.ones(2, 2, requires_grad=True)
print(tense)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[1., 1.],
        [1., 1.]], requires_grad=True)
&lt;/pre&gt;


&lt;p&gt;
Now if you do a tensor operation:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tensed = tense + 1
print(tensed)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[2., 2.],
        [2., 2.]], grad_fn=&amp;lt;AddBackward0&amp;gt;)
&lt;/pre&gt;


&lt;p&gt;
Our new tensor has a gradient function set for it. If you do more operations on &lt;code&gt;tensed&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tenser = tensed * 5
print(tenser)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[10., 10.],
        [10., 10.]], grad_fn=&amp;lt;MulBackward0&amp;gt;)
&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = torch.ones(5, requires_grad=False)
b = a * 5
a.requires_grad_(True)
c = a * 6
print(b)
print(c)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([5., 5., 5., 5., 5.])
tensor([6., 6., 6., 6., 6.], grad_fn=&amp;lt;MulBackward0&amp;gt;)
&lt;/pre&gt;


&lt;p&gt;
Two things to note, one is that the gradient function is only set while the &lt;code&gt;requires_grad&lt;/code&gt; attribute is true, the other is that this only works on the leafs in the graph - you can set it on &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; but not &lt;code&gt;c&lt;/code&gt; - because since I set &lt;code&gt;requires_grad&lt;/code&gt; to True on &lt;code&gt;a&lt;/code&gt;, when I created &lt;code&gt;c&lt;/code&gt; by multiplying &lt;code&gt;a&lt;/code&gt; by 6, &lt;code&gt;c&lt;/code&gt; became part of &lt;code&gt;a&lt;/code&gt;'s graphâ¦ I think. Anyway, you can't set it on tensors that are part of the backpropagation path.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org25eff36" class="outline-4"&gt;
&lt;h4 id="org25eff36"&gt;Backpropagation&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org25eff36"&gt;
&lt;p&gt;
You run back-propagation by calling the &lt;a href="https://pytorch.org/docs/stable/autograd.html#torch.Tensor.backward"&gt;&lt;code&gt;backward&lt;/code&gt;&lt;/a&gt; method on the last tensor in the graph. In our case the last tensor we have (&lt;code&gt;tenser&lt;/code&gt;) doesn't output numbers so we need to create a final tensor that does for back-propagation to work.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output = tenser.mean()
output.backward()
print(tense.grad)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[1.2500, 1.2500],
        [1.2500, 1.2500]])
&lt;/pre&gt;


&lt;p&gt;
After one pass through the network (and back) our root-node tensor has some gradients.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07a69ab" class="outline-4"&gt;
&lt;h4 id="org07a69ab"&gt;Context Manager&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org07a69ab"&gt;
&lt;p&gt;
If you need to temporarily turn the gradient tracking on or off you can use a context manager.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print((tense*2).requires_grad)
with torch.no_grad():
    print((tense* 2).requires_grad)
print((tense * 2).requires_grad)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
True
False
True
&lt;/pre&gt;


&lt;p&gt;
Note that the root-will still have &lt;code&gt;require_grad&lt;/code&gt; as true, it's the output of operations working with it that don't get the gradient set.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(tense.requires_grad)
with torch.no_grad():
    print(tense.requires_grad)
print(tense.requires_grad)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
True
True
True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6788827" class="outline-3"&gt;
&lt;h3 id="org6788827"&gt;Neural Networks&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6788827"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org75b1315" class="outline-4"&gt;
&lt;h4 id="org75b1315"&gt;A Typical Model Training Procedure&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org75b1315"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Define the neural network&lt;/li&gt;
&lt;li&gt;Iterate over a dataset of inputs&lt;/li&gt;
&lt;li&gt;Process each input through the network&lt;/li&gt;
&lt;li&gt;Compute the loss (how much error there is)&lt;/li&gt;
&lt;li&gt;Update the weights of the network&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The most common way to update the weights is to use a simple formula.
\[
weight = weight - textit{learning rate} \times gradient
\]
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org75ebfe4" class="outline-4"&gt;
&lt;h4 id="org75ebfe4"&gt;Defining the Network&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org75ebfe4"&gt;
&lt;p&gt;
This will be a network with five layers - two &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Convolutional_layer"&gt;convolutional layers&lt;/a&gt; followed by three &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Fully_connected_layer"&gt;fully-connected layers&lt;/a&gt;. For the convolutional layers we're going to use &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer"&gt;Max-Pooling&lt;/a&gt; and for the fully-connected layers we'll use &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#ReLU_layer"&gt;ReLU&lt;/a&gt; activation.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org6f6d2ef"&gt;&lt;/a&gt;The Layers&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6f6d2ef"&gt;
&lt;p&gt;
You can just create the layers in the constructor, but since I'm trying to re-learn what's going on I'm going to peel it apart a little more.
&lt;/p&gt;

&lt;p&gt;
The first layer is the input layer, so the &lt;code&gt;inputs&lt;/code&gt; have to match whatever data you are going to get. In our case we are going to look at a black and white image so it has one input-channel. The three required arguments to the 
&lt;a href="https://pytorch.org/docs/stable/nn.html#convolution-layers"&gt;Conv2d&lt;/a&gt; constructor are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;in_channels&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out_channels&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kernel_size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class LayerOne:
    inputs = 1
    outputs = 6
    convolution_size = 5
    layer = neural_network.Conv2d(inputs, outputs, convolution_size)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class LayerTwo:
    inputs = LayerOne.outputs
    outputs = 16
    convolution_size = 5
    layer = neural_network.Conv2d(inputs, outputs, convolution_size)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Layer Three is the first &lt;a href="https://pytorch.org/docs/stable/nn.html#linear"&gt;Linear&lt;/a&gt; layer. Linear layers do a linear transformation on the inputs.
&lt;/p&gt;

&lt;p&gt;
\[
y = x W^T + b
\]
&lt;/p&gt;

&lt;p&gt;
Where &lt;i&gt;x&lt;/i&gt; is the input, &lt;i&gt;W&lt;/i&gt; is the weight matrix and &lt;i&gt;b&lt;/i&gt; is a bias constant.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class LayerThree:
    inputs = (LayerTwo.outputs * LayerOne.convolution_size 
	      * LayerTwo.convolution_size)
    outputs = 120
    layer = neural_network.Linear(inputs, outputs)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class LayerFour:
    inputs = LayerThree.outputs
    outputs = 84
    layer = neural_network.Linear(inputs, outputs)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is the last layer so the outputs are the outputs for the model as a whole.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class LayerFive:
    inputs = LayerFour.outputs
    outputs = 10
    layer = neural_network.Linear(inputs, outputs)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For the forward-pass our convolutional layers will have their output pooled using &lt;a href="https://pytorch.org/docs/stable/nn.html#torch.nn.functional.max_pool2d"&gt;max_pool2d&lt;/a&gt; and all the layers (except for the output layers) will use &lt;a href="https://pytorch.org/docs/stable/nn.html#torch.nn.functional.relu"&gt;relu&lt;/a&gt; as the activation function to keep the model from being linear.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class NeuralNetwork(neural_network.Module):
    """A five-layer Convolutional Neural Network"""
    def __init__(self):
	super().__init__()
	self.layer_one = LayerOne.layer
	self.layer_two = LayerTwo.layer
	self.layer_three = LayerThree.layer
	self.layer_four = LayerFour.layer
	self.layer_five = LayerFive.layer
	return

    def flattened_features_counts(self, x):
	sizes = x.size()[1:]
	features = 1
	for size in sizes:
	    features *= size
	return features

    def forward(self, x):
	"""One forward pass through the network

	Args:
	 x: a one-channel image

	Returns:
	 a ten-output linear layer
	"""
	x = functional.max_pool2d(functional.relu(self.layer_one(x)), (2, 2))
	x = functional.max_pool2d(functional.relu(self.layer_two(x)), 2)
	x = x.view(-1, self.flattened_features_counts(x))
	x = functional.relu(self.layer_three(x))
	x = functional.relu(self.layer_four(x))
	return self.layer_five(x)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model = NeuralNetwork()
print(model)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
NeuralNetwork(
  (layer_one): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (layer_two): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (layer_three): Linear(in_features=400, out_features=120, bias=True)
  (layer_four): Linear(in_features=120, out_features=84, bias=True)
  (layer_five): Linear(in_features=84, out_features=10, bias=True)
)
&lt;/pre&gt;


&lt;p&gt;
The output shows the parameters for each layer in our model.
&lt;/p&gt;

&lt;p&gt;
A sample output.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INPUT_SIZE = 32
mock_image = torch.randn(1, 1, INPUT_SIZE, INPUT_SIZE)
output = model(mock_image)
print(output)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
tensor([[ 0.1163,  0.0882,  0.0529,  0.0546, -0.0196, -0.1215, -0.1736,  0.0659,
          0.0762, -0.0093]], grad_fn=&amp;lt;AddmmBackward&amp;gt;)
&lt;/pre&gt;


&lt;p&gt;
This is the output after one forward pass. Unfortunately we didn't want to train it on fake data so we should reset it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model.zero_grad()
output.backward(torch.randn(1, 10))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9d9a6d7" class="outline-4"&gt;
&lt;h4 id="org9d9a6d7"&gt;The Loss Function&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-org34341e4" class="outline-4"&gt;
&lt;h4 id="org34341e4"&gt;Backpropagation&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-org394b645" class="outline-4"&gt;
&lt;h4 id="org394b645"&gt;Update the Weights&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0746c22" class="outline-3"&gt;
&lt;h3 id="org0746c22"&gt;Training a Classifier&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-org76464e6" class="outline-3"&gt;
&lt;h3 id="org76464e6"&gt;Data Parallelism&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org614d9e7" class="outline-2"&gt;
&lt;h2 id="org614d9e7"&gt;The Return&lt;/h2&gt;
&lt;/div&gt;</description><category>pytorch</category><category>tutorial</category><guid>https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/pytorch-60-minute-blitz/</guid><pubDate>Wed, 03 Apr 2019 19:36:06 GMT</pubDate></item><item><title>Chatbot Tutorial</title><link>https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org2945445"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orga14b733"&gt;Set Up&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org73e0fab"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org04d9c7a"&gt;Setup the Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org0f4b4db"&gt;Load Dotenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orgdb7a239"&gt;Check CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org1497fda"&gt;Some Type Hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org0b5e68b"&gt;Some Constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org891dade"&gt;The Data&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org49358c8"&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org88b0e95"&gt;Movie Lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orga7e7a07"&gt;Conversations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orgdb7a653"&gt;Store the Processed Lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#org76a5c18"&gt;Check Our Stored File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orgb57f719"&gt;A Vocabulary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orgc608bf4"&gt;Preparing the Data For Model-Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/#orgbeb6b15"&gt;Related Repositories To Check Out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2945445" class="outline-2"&gt;
&lt;h2 id="org2945445"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2945445"&gt;
&lt;p&gt;
This is a walk-through the &lt;a href="https://pytorch.org/tutorials/beginner/chatbot_tutorial.html"&gt;pytorch Chatbot Tutorial&lt;/a&gt; which builds a chatbot using a recurrent Sequence-to-Sequence model trained on the &lt;a href="https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html"&gt;Cornell Movie-Dialogs Corpus&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga14b733" class="outline-2"&gt;
&lt;h2 id="orga14b733"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga14b733"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org73e0fab" class="outline-3"&gt;
&lt;h3 id="org73e0fab"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org73e0fab"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1c0d438" class="outline-4"&gt;
&lt;h4 id="org1c0d438"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1c0d438"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from collections import defaultdict, namedtuple
import codecs
from pathlib import Path
from typing import Dict, List, Union
from zipfile import ZipFile
import csv
import os
import subprocess
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4068d21" class="outline-4"&gt;
&lt;h4 id="org4068d21"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4068d21"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from dotenv import load_dotenv
import requests
import torch
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org153825e" class="outline-4"&gt;
&lt;h4 id="org153825e"&gt;This Project&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org153825e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from neurotic.tangles.timer import Timer
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org04d9c7a" class="outline-3"&gt;
&lt;h3 id="org04d9c7a"&gt;Setup the Timer&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org04d9c7a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIMER = Timer()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0f4b4db" class="outline-3"&gt;
&lt;h3 id="org0f4b4db"&gt;Load Dotenv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0f4b4db"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;load_dotenv("../../.env")
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdb7a239" class="outline-3"&gt;
&lt;h3 id="orgdb7a239"&gt;Check CUDA&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdb7a239"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Using {}".format(device))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Using cuda
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1497fda" class="outline-3"&gt;
&lt;h3 id="org1497fda"&gt;Some Type Hints&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1497fda"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OptionalList = Union[list, None]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0b5e68b" class="outline-3"&gt;
&lt;h3 id="org0b5e68b"&gt;Some Constants&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0b5e68b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ENCODING = "iso-8859-1"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org891dade" class="outline-2"&gt;
&lt;h2 id="org891dade"&gt;The Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org891dade"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org49358c8" class="outline-3"&gt;
&lt;h3 id="org49358c8"&gt;Download&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org49358c8"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class MovieData:
    """Dowload and ready the movie data
    Args:
     download_path: Path to the folder to store the data
     url: download url for the zip file
     chunk_size: bytes to read from stream during download
     clean_up: remove the extra downloaded files
    """
    def __init__(self,
		 download_path: Path,
		 url: str=("http://www.cs.cornell.edu/~cristian/data/"
			   "cornell_movie_dialogs_corpus.zip"),
		 chunk_size=1024,
		 clean_up: bool=True) -&amp;gt; None:
	self.download_path = download_path
	self.url = url
	self.chunk_size = chunk_size
	self.clean_up = clean_up
	self._zip_path = None
	self._data_path = None
	self._zip_file = None
	return

    @property
    def zip_path(self) -&amp;gt; Path:
	"""Path to the downloaded zip file"""
	if self._zip_path is None:
	    self._zip_path = self.download_path.joinpath(Path(self.url).name)
	return self._zip_path

    @property
    def data_path(self) -&amp;gt; Path:
	"""Path to the unzipped file"""
	if self._data_path is None:
	    self._data_path = self.download_path.joinpath(
		Path(self.zip_path).stem)
	return self._data_path

    @property
    def zip_file(self) -&amp;gt; ZipFile:
	"""the Zip file for the zipped data"""
	if self._zip_file is None:
	    self._zip_file = ZipFile(self.zip_path)
	return self._zip_file

    def clean(self) -&amp;gt; None:
	"""remove the extra downloaded files"""
	os.remove(self.zip_path)
	return

    def __call__(self) -&amp;gt; None:
	"""downloads and prepares the file if needed"""
	if not self.data_path.is_dir():
	    if not self.zip_path.is_file():
		response = requests.get(self.url, stream=True)
		with self.zip_path.open("wb") as writer:
		    for chunk in response.iter_content(chunk_size=self.chunk_size):
			if chunk:
			    writer.write(chunk)
	    unpacked = []
	    for name in self.zip_file.namelist():
		name = Path(name)
		# there's extra folders and hidden files in there that I'll avoid
		if name.suffix in (".pdf", ".txt") and not name.name.startswith("."):
		    self.zip_file.extract(str(name), path=self.data_path)
		    unpacked.append(name)
	    assert self.data_path.is_dir()
	    if self.clean_up:
		# there is a sub-folder in the unzipped folder so move the
		# the files up one
		for to_move in unpacked:
		    self.data_path.joinpath(to_move).rename(
			self.data_path.joinpath(to_move.name))

		# now delete the temporary file
		os.remove(self.zip_path)
		if unpacked:
		    # now remove the sub-folder
		    self.data_path.joinpath(unpacked[0].parent).rmdir()
	return
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now let's download and unpack the data.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;datasets = Path(os.environ.get("DATASETS")).expanduser()
assert datasets.is_dir()
movie_data = MovieData(datasets, clean_up=True)
movie_data()
for name in movie_data.data_path.iterdir():
    print(" - {}".format(name.name))
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;chameleons.pdf&lt;/li&gt;
&lt;li&gt;conversation_line_pairs.tsv&lt;/li&gt;
&lt;li&gt;movie_conversations.txt&lt;/li&gt;
&lt;li&gt;movie_characters_metadata.txt&lt;/li&gt;
&lt;li&gt;movie_lines.txt&lt;/li&gt;
&lt;li&gt;movie_titles_metadata.txt&lt;/li&gt;
&lt;li&gt;raw_script_urls.txt&lt;/li&gt;
&lt;li&gt;README.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class MovieFile:
    urls = "raw_script_urls.txt"
    readme = "README.txt"
    lines = "movie_lines.txt"
    characters = "movie_characters_metadata.txt"
    conversations = "movie_conversations.txt"
    titles = "movie_titles_metadata.txt"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88b0e95" class="outline-3"&gt;
&lt;h3 id="org88b0e95"&gt;Movie Lines&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org88b0e95"&gt;
&lt;p&gt;
Here's an excerpt from the &lt;code&gt;README.txt&lt;/code&gt; file:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
In all files the field separator is " &lt;del&gt;&lt;del&gt;&lt;del&gt;$&lt;/del&gt;&lt;/del&gt;&lt;/del&gt; "
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;movie_lines.txt
&lt;ul class="org-ul"&gt;
&lt;li&gt;contains the actual text of each utterance&lt;/li&gt;
&lt;li&gt;fields:
&lt;ul class="org-ul"&gt;
&lt;li&gt;lineID&lt;/li&gt;
&lt;li&gt;characterID (who uttered this phrase)&lt;/li&gt;
&lt;li&gt;movieID&lt;/li&gt;
&lt;li&gt;character name&lt;/li&gt;
&lt;li&gt;text of the utterance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc69fe73" class="outline-4"&gt;
&lt;h4 id="orgc69fe73"&gt;Movie Line Data&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc69fe73"&gt;
&lt;p&gt;
To load the lines I'm going to make a &lt;a href="https://docs.python.org/3.6/library/collections.html#collections.namedtuple"&gt;namedtuple&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MovieLine = namedtuple("MovieLine", ["line_id",
				     "character_id",
				     "movie_id",
				     "character_name",
				     "text"])

LineData = Dict[str, MovieLine]
LineFields = MovieLine(**{field: index
			  for index, field in enumerate(MovieLine._fields)})
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd677aee" class="outline-4"&gt;
&lt;h4 id="orgd677aee"&gt;A Line Loader&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd677aee"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class MovieLines:
    """loads the movie dialog lines

    Args:
     path: path to the source file
     separator: column-separator
     encoding: the file encoding type (e.g. UTF-8)
    """
    def __init__(self, path: Path, separator: str=" +++$+++ ",
		 encoding="UTF-8") -&amp;gt; None:
	self.path = path
	self.separator = separator
	self.encoding = encoding
	self._lines = None
	return

    @property
    def lines(self) -&amp;gt; LineData:
	"""Dictionary Of Lines in the Data"""
	if self._lines is None:
	    self._lines = {}
	    with self.path.open(encoding=self.encoding) as reader:
		for line in reader:
		    tokens = line.strip().split(self.separator)

		    text = tokens[LineFields.text] if len(tokens) == len(LineFields) else ""
		    movie_line = MovieLine(line_id=tokens[LineFields.line_id],
					   character_id=tokens[LineFields.character_id],
					   movie_id=tokens[LineFields.movie_id],
					   character_name=tokens[LineFields.character_name],
					   text=text,
		    )
		    self._lines[movie_line.line_id] = movie_line
	return self._lines

    def head(self, lines: int=5, get: bool=False) -&amp;gt; OptionalList:
	"""show the first lines

	Args:
	 lines: number of lines to read
	 get: if true, return the lines
	"""
	output = [] if get else None
	with self.path.open() as reader:
	    for index, line in enumerate(reader):
		line = line.rstrip()
		print(line)
		if get:
		    output.append(line)
		if index + 1 &amp;gt;= lines:
		    break
	return output
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;movie_lines = MovieLines(movie_data.data_path.joinpath(MovieFile.lines), encoding=ENCODING)
output_lines = movie_lines.head(10)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example" id="org891a7fb"&gt;
L1045 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ They do not!
L1044 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ They do to!
L985 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ I hope so.
L984 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ She okay?
L925 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Let's go.
L924 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ Wow
L872 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Okay -- you're gonna need to learn how to lie.
L871 +++$+++ u2 +++$+++ m0 +++$+++ CAMERON +++$+++ No
L870 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ I'm kidding.  You know how sometimes you just become this "persona"?  And you don't know how to quit?
L869 +++$+++ u0 +++$+++ m0 +++$+++ BIANCA +++$+++ Like my fear of wearing pastels?
&lt;/pre&gt;


&lt;p&gt;
As note in the &lt;code&gt;README.txt&lt;/code&gt; those strange characters are how the columns are separated (I guess so that the commas could be kept in the text). The Line IDs seem to be in reverse oredr, and don't seem to have all the lines - unless they're out of order and just looking at the head is misleading. For reference the movie for the lines I showed (the dialog between Bianca and Cameron) is from &lt;a href="https://www.imdb.com/title/tt0147800/"&gt;12 Things I Hate About You&lt;/a&gt;. For some reason they both encode the chraracters and give their names - &lt;code&gt;u0&lt;/code&gt; is &lt;code&gt;BIANCA&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
If you poke around in the file you'll find that there's something peculiar about the characters in it.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output = subprocess.run(["file", "-i", str(movie_lines.path)], stdout=subprocess.PIPE)
print(output.stdout)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
b'/home/athena/data/datasets/cornell_movie_dialogs_corpus/movie_lines.txt: text/plain; charset=unknown-8bit\n'
&lt;/pre&gt;


&lt;p&gt;
It doesn't look like standard ASCII, but I wonder if it matters. In the pytorch tutorial they give the encoding as &lt;code&gt;iso-8859-1&lt;/code&gt;, although I can't find any documentation for this, but since they gave it, I guess we can use it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ENCODING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"iso-8859-1"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm using it in MovieLines too so I defined ENCODING at the top of the notebook, this is just to show where it came from.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga7e7a07" class="outline-3"&gt;
&lt;h3 id="orga7e7a07"&gt;Conversations&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga7e7a07"&gt;
&lt;p&gt;
The movie-lines file has all the movie-conversations together, but we want conversations between characters. For that you need to group the lines using the &lt;code&gt;movie_conversations.txt&lt;/code&gt; file.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;movie_conversations.txt
&lt;ul class="org-ul"&gt;
&lt;li&gt;the structure of the conversations&lt;/li&gt;
&lt;li&gt;fields
&lt;ul class="org-ul"&gt;
&lt;li&gt;characterID of the first character involved in the conversation&lt;/li&gt;
&lt;li&gt;characterID of the second character involved in the conversation&lt;/li&gt;
&lt;li&gt;movieID of the movie in which the conversation occurred&lt;/li&gt;
&lt;li&gt;list of the utterances that make the conversation, in chronological 
order: ['lineID1','lineID2',Ã,'lineIDN']
has to be matched with movie_lines.txt to reconstruct the actual content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;
You can see that the README has some kind of funky character in it (the third item in the &lt;code&gt;order&lt;/code&gt; list). Weird.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org903c941" class="outline-4"&gt;
&lt;h4 id="org903c941"&gt;A Conversation Holder&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org903c941"&gt;
&lt;p&gt;
A &lt;i&gt;conversation&lt;/i&gt; is a list of lines said by characters to each other. Although the dialog file is presumably in order, we want to be able to partition lines that are part of a single conversation - a verbal interaction between two characters.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ConversationIDs = namedtuple("ConversationIDs", ["character_id_1",
						 "character_id_2",
						 "movie_id",
						 "lines"])
ConversationFields = ConversationIDs(
    **{field: index
       for index, field in enumerate(ConversationIDs._fields)})
ConversationData = List[ConversationIDs]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org85d0c6f" class="outline-4"&gt;
&lt;h4 id="org85d0c6f"&gt;A Conversations Builder&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org85d0c6f"&gt;
&lt;p&gt;
This is code to pull the lines out and group them by conversation.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Conversations:
    """Holds the conversations

    Args:
     path: path to the conversations file
     moviez: object with the movie lines
     encoding: the encoding for the file
     separator: the column separator
    """
    def __init__(self,
		 path: Path,
		 movies: MovieLines,
		 separator: str=" +++$+++ ",
		 encoding:str="UTF-8") -&amp;gt; None:
	self.path = path
	self.movies = movies
	self.separator = separator
	self.encoding = encoding
	self._conversations = None
	self._sentence_pairs = None
	return

    @property
    def conversations(self) -&amp;gt; ConversationData:
	"""The list of conversation line data
	"""
	if self._conversations is None:
	    self._conversations = []
	    with self.path.open(encoding=self.encoding) as reader:
		for line in reader:
		    tokens = line.strip().split(self.separator)
		    line_ids = eval(tokens[ConversationFields.lines])
		    lines = [self.movies.lines[line_id] for line_id in line_ids]
		    self._conversations.append(
			ConversationIDs(
			    character_id_1=tokens[ConversationFields.character_id_1],
			    character_id_2=tokens[ConversationFields.character_id_2],
			    movie_id=tokens[ConversationFields.movie_id],
			    lines = lines,
			))
	return self._conversations

    @property
    def sentence_pairs(self) -&amp;gt; list:
	"""paired-sentences from the conversations"""
	if self._sentence_pairs is None:
	    self._sentence_pairs = []
	    for conversation in self.conversations:
		for index in range(len(conversation.lines) - 1):
		    utterance = conversation.lines[index].text
		    response = conversation.lines[index + 1].text
		    # you might not always have pairs
		    if utterance and response:
			self._sentence_pairs.append([utterance, response])
	return self._sentence_pairs

    def head(self, count: int=5) -&amp;gt; None:
	"""Print the first lines

	Args:
	 count: how many lines to print
	"""
	with self.path.open(encoding=self.encoding) as reader:
	    so_far = 0
	    for line in reader:
		print(line.rstrip())
		so_far += 1
		if so_far &amp;gt;= count:
		    break
	return
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now I'll build the conversations from the file.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conversations_path = movie_data.data_path.joinpath(MovieFile.conversations)
conversations = Conversations(conversations_path, movie_lines, encoding=ENCODING)
conversations.head()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
u0 +++$+++ u2 +++$+++ m0 +++$+++ ['L194', 'L195', 'L196', 'L197']
u0 +++$+++ u2 +++$+++ m0 +++$+++ ['L198', 'L199']
u0 +++$+++ u2 +++$+++ m0 +++$+++ ['L200', 'L201', 'L202', 'L203']
u0 +++$+++ u2 +++$+++ m0 +++$+++ ['L204', 'L205', 'L206']
u0 +++$+++ u2 +++$+++ m0 +++$+++ ['L207', 'L208']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdb7a653" class="outline-3"&gt;
&lt;h3 id="orgdb7a653"&gt;Store the Processed Lines&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdb7a653"&gt;
&lt;p&gt;
Since we've transformed the data we should store it to avoid needing to transform it again later.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with TIMER:
    processed_path = movie_data.data_path.joinpath("conversation_line_pairs.tsv")
    delimiter = str(codecs.decode("\t", "unicode_escape"))
    NEWLINE = "\n"
    with processed_path.open("w", encoding="utf-8") as outputfile:
	writer = csv.writer(outputfile, delimiter=delimiter)
	for pair in conversations.sentence_pairs:
	    writer.writerow(pair)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Started: 2019-02-18 18:44:01.624014
Ended: 2019-02-18 18:44:04.127445
Elapsed: 0:00:02.503431
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org76a5c18" class="outline-3"&gt;
&lt;h3 id="org76a5c18"&gt;Check Our Stored File&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org76a5c18"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with processed_path.open() as reader:
    count = 0
    for line in reader:
	print(repr(line))
	count += 1
	if count == 5:
	    break
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
"Can we make this quick?  Roxanne Korrine and Andrew Barrett are having an incredibly horrendous public break- up on the quad.  Again.\tWell, I thought we'd start with pronunciation, if that's okay with you.\n"
"Well, I thought we'd start with pronunciation, if that's okay with you.\tNot the hacking and gagging and spitting part.  Please.\n"
"Not the hacking and gagging and spitting part.  Please.\tOkay... then how 'bout we try out some French cuisine.  Saturday?  Night?\n"
"You're asking me out.  That's so cute. What's your name again?\tForget it.\n"
"No, no, it's my fault -- we didn't have a proper introduction ---\tCameron.\n"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb57f719" class="outline-2"&gt;
&lt;h2 id="orgb57f719"&gt;A Vocabulary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb57f719"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PADDING, START_OF_SENTENCE, END_OF_SENTENCE = 0, 1, 2

class Vocabulary:
    """A class to hold words and sentences

    Args:
     name: name of the vocabulary
     token_delimiter: what to split sentences on
    """
    def __init__(self, name: str, token_delimiter: str=" ") -&amp;gt; None:
	self.name = name
	self.trimmed = False
	self.token_delimiter = token_delimiter
	self.word_to_index = {}
	self._word_to_count = None
	self._index_to_word = None
	return

    @property
    def word_to_count(self) -&amp;gt; defaultdict:
	"""map of word to word count"""
	if self._word_to_count is None:
	    self._word_to_count = defaultdict(lambda: 1)
	return self._word_to_count

    @property
    def index_to_word(self) -&amp;gt; dict:
	"""map of word-index back to the word"""
	if self._index_to_word is None:
	    self._index_to_word = dict(
		PADDING="PAD",
		START_OF_SENTENCE="SOS",
		END_OF_SENTENCE="EOS",
	    )
	return self._index_to_word

    @property
    def word_count(self) -&amp;gt; int:
	"""the number of words in our vocabulary"""
	return len(self.index_to_word)

    def add_sentence(self, sentence: str) -&amp;gt; None:
	"""Adds the words in the sentence to our dictionary

	Args:
	 sentence: string of words
	"""
	for word in sentence.split(self.token_delimiter):
	    self.add_word(word)
	return

    def add_word(self, word: str) -&amp;gt; None:
	"""add the word to our vocabulary

	Args:
	 word: word to add
	"""
	if word not in self.word_to_index:
	    self.word_to_index[word] = self.word_count
	    self.index_to_word[self.word_count] = word
	else:
	    self.word_to_count[word] += 1
	return

    def trim(self, minimum: int) -&amp;gt; None:
	"""Trim words below the minimum

	.. warning:: This will only work once, even if you change the
	  minimum. set self.trimmed to False if you want to do it again

	Args:
	 minimum: lowest acceptible count for a word
	"""
	if self.trimmed:
	    return
	self.trimmed = True
	keepers = []
	for word, count in self.word_to_count.items():
	    if count &amp;gt;= minimum:
		keepers.append(word)
	print("Keep: {}/{} = {:.2f}".format(len(keepers),
					    len(self.word_count),
					    len(keepers)/len(self.word_count)))
	self.reset()
	for word in keepers:
	    self.add_word(word)
	return

    def reset(self) -&amp;gt; None:
	"""Resets the dictionaries"""
	self.word_to_index = {}
	self._word_to_count = None
	self._index_to_word = None
	return
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc608bf4" class="outline-2"&gt;
&lt;h2 id="orgc608bf4"&gt;Preparing the Data For Model-Training&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbeb6b15" class="outline-2"&gt;
&lt;h2 id="orgbeb6b15"&gt;Related Repositories To Check Out&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbeb6b15"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/ywk991112/pytorch-chatbot"&gt;Formosa Speech Grand Challenge Chatbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spro/practical-pytorch/tree/master/seq2seq-translation"&gt;Practical Pytorch seq2seq translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/floydhub/textutil-preprocess-cornell-movie-corpus"&gt;Cornell Movie Corpus Pre-processor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>rnn</category><category>text</category><category>tutorial</category><guid>https://necromuralist.github.io/Neurotic-Networking/posts/pytorch/text/chatbot-tutorial/</guid><pubDate>Sun, 10 Feb 2019 23:02:29 GMT</pubDate></item></channel></rss>